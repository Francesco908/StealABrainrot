-- Water Hub Script - Professional Mobile Optimized Version
-- Complete rewrite with advanced features and animations

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local GuiService = game:GetService("GuiService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local camera = workspace.CurrentCamera

-- Mobile detection
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Global variables
local waterHubGui
local minimizedIcon
local loadingGui
local openGuis = {}
local connections = {}
local states = {
    infiniteJump = false,
    float = false,
    speedBoost = false,
    espPlayers = false,
    espLines = false,
    espBox = false,
    espSkeleton = false,
    espNames = false,
    noclip = false,
    fly = false,
    godMode = true -- Auto-enabled on start
}

local floatBody = nil
local flyBody = nil
local basePosition = nil
local originalWalkSpeed = 16
local characterAddedConnection = nil
local espObjects = {}
local noclipConnection = nil
local godModeConnection = nil

-- Mobile controller for float
local floatController = nil
local touchGui = nil

-- Safe character functions
local function getCharacter()
    return player.Character
end

local function getHumanoid()
    local char = getCharacter()
    return char and char:FindFirstChildOfClass("Humanoid")
end

local function getRootPart()
    local char = getCharacter()
    return char and (char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso"))
end

-- Create rounded frame with shadow
local function createFrame(parent, size, position, color, transparency)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = color
    frame.BackgroundTransparency = transparency or 0
    frame.BorderSizePixel = 0
    frame.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, isMobile and 16 or 12)
    corner.Parent = frame
    
    -- Add shadow for depth
    local shadow = Instance.new("ImageLabel")
    shadow.Size = UDim2.new(1, 30, 1, 30)
    shadow.Position = UDim2.new(0, -15, 0, -15)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Parent = frame
    shadow.ZIndex = -1
    
    return frame
end

-- Create animated loading screen
local function createLoadingScreen()
    loadingGui = Instance.new("ScreenGui")
    loadingGui.Name = "WaterHubLoading"
    loadingGui.Parent = CoreGui
    loadingGui.ResetOnSpawn = false
    loadingGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loadingGui.DisplayOrder = 999999 -- Ensure it's on top
    loadingGui.IgnoreGuiInset = true -- Full screen coverage
    
    -- Full screen background with gradient
    local background = Instance.new("Frame")
    background.Size = UDim2.new(1, 0, 1, 36) -- Extra height for mobile notch
    background.Position = UDim2.new(0, 0, 0, -36)
    background.BackgroundColor3 = Color3.fromRGB(10, 10, 20)
    background.BorderSizePixel = 0
    background.Parent = loadingGui
    
    -- Gradient overlay
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 20)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(20, 30, 50)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 20))
    })
    gradient.Rotation = 45
    gradient.Parent = background
    
    -- Water particles background
    local particlesFrame = Instance.new("Frame")
    particlesFrame.Size = UDim2.new(1, 0, 1, 0)
    particlesFrame.BackgroundTransparency = 1
    particlesFrame.Parent = background
    
    -- Create floating water particles
    spawn(function()
        for i = 1, 20 do
            local particle = Instance.new("Frame")
            particle.Size = UDim2.new(0, math.random(4, 12), 0, math.random(4, 12))
            particle.Position = UDim2.new(math.random(), 0, math.random(), 0)
            particle.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
            particle.BackgroundTransparency = 0.7
            particle.BorderSizePixel = 0
            particle.Parent = particlesFrame
            
            local particleCorner = Instance.new("UICorner")
            particleCorner.CornerRadius = UDim.new(1, 0)
            particleCorner.Parent = particle
            
            -- Animate particles
            spawn(function()
                while loadingGui and loadingGui.Parent do
                    local floatTween = TweenService:Create(particle,
                        TweenInfo.new(math.random(3, 6), Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
                        {Position = UDim2.new(math.random(), 0, math.random(), 0)}
                    )
                    floatTween:Play()
                    wait(math.random(1, 3))
                end
            end)
        end
    end)
    
    -- Main water drop container
    local dropContainer = Instance.new("Frame")
    dropContainer.Size = UDim2.new(0, 300, 0, 300)
    dropContainer.Position = UDim2.new(0.5, -150, 0.5, -150)
    dropContainer.BackgroundTransparency = 1
    dropContainer.Parent = loadingGui
    
    -- Glow effect behind water drop
    local glowEffect = Instance.new("ImageLabel")
    glowEffect.Size = UDim2.new(1.5, 0, 1.5, 0)
    glowEffect.Position = UDim2.new(-0.25, 0, -0.25, 0)
    glowEffect.BackgroundTransparency = 1
    glowEffect.Image = "rbxassetid://5028857084" -- Glow image
    glowEffect.ImageColor3 = Color3.fromRGB(0, 170, 255)
    glowEffect.ImageTransparency = 0.5
    glowEffect.Parent = dropContainer
    
    -- Create spinning water drop
    local waterDrop = Instance.new("ImageLabel")
    waterDrop.Size = UDim2.new(0.8, 0, 0.8, 0)
    waterDrop.Position = UDim2.new(0.1, 0, 0.1, 0)
    waterDrop.BackgroundTransparency = 1
    waterDrop.Image = "rbxassetid://6034684930" -- Water drop icon
    waterDrop.ImageColor3 = Color3.fromRGB(0, 170, 255)
    waterDrop.Parent = dropContainer
    
    -- Title with better styling
    local titleContainer = Instance.new("Frame")
    titleContainer.Size = UDim2.new(1, 200, 0, 80)
    titleContainer.Position = UDim2.new(0, -100, 1, 40)
    titleContainer.BackgroundTransparency = 1
    titleContainer.Parent = dropContainer
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 60)
    title.BackgroundTransparency = 1
    title.Text = "WATER HUB"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = titleContainer
    
    -- Add text stroke for better visibility
    local titleStroke = Instance.new("UIStroke")
    titleStroke.Color = Color3.fromRGB(0, 100, 200)
    titleStroke.Thickness = 2
    titleStroke.Parent = title
    
    -- Version label
    local versionLabel = Instance.new("TextLabel")
    versionLabel.Size = UDim2.new(1, 0, 0, 20)
    versionLabel.Position = UDim2.new(0, 0, 0, 60)
    versionLabel.BackgroundTransparency = 1
    versionLabel.Text = "Professional Edition v2.0"
    versionLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    versionLabel.TextScaled = true
    versionLabel.Font = Enum.Font.SourceSansItalic
    versionLabel.Parent = titleContainer
    
    -- Loading bar container
    local loadingBarContainer = Instance.new("Frame")
    loadingBarContainer.Size = UDim2.new(0, 400, 0, 8)
    loadingBarContainer.Position = UDim2.new(0.5, -200, 0, 140)
    loadingBarContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    loadingBarContainer.BorderSizePixel = 0
    loadingBarContainer.Parent = titleContainer
    
    local loadingBarCorner = Instance.new("UICorner")
    loadingBarCorner.CornerRadius = UDim.new(0, 4)
    loadingBarCorner.Parent = loadingBarContainer
    
    -- Loading bar fill
    local loadingBar = Instance.new("Frame")
    loadingBar.Size = UDim2.new(0, 0, 1, 0)
    loadingBar.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    loadingBar.BorderSizePixel = 0
    loadingBar.Parent = loadingBarContainer
    
    local loadingBarFillCorner = Instance.new("UICorner")
    loadingBarFillCorner.CornerRadius = UDim.new(0, 4)
    loadingBarFillCorner.Parent = loadingBar
    
    -- Loading text
    local loadingText = Instance.new("TextLabel")
    loadingText.Size = UDim2.new(1, 0, 0, 30)
    loadingText.Position = UDim2.new(0, 0, 0, 160)
    loadingText.BackgroundTransparency = 1
    loadingText.Text = "Initializing..."
    loadingText.TextColor3 = Color3.fromRGB(200, 200, 200)
    loadingText.TextScaled = true
    loadingText.Font = Enum.Font.SourceSans
    loadingText.Parent = titleContainer
    
    -- Spinning animation for water drop (like minimized icon)
    local spinConnection
    spinConnection = RunService.Heartbeat:Connect(function()
        if waterDrop and waterDrop.Parent then
            waterDrop.Rotation = waterDrop.Rotation + 2
            glowEffect.Rotation = glowEffect.Rotation - 1
        else
            spinConnection:Disconnect()
        end
    end)
    
    -- Pulse and scale animation
    spawn(function()
        local pulse = 0
        while loadingGui and loadingGui.Parent do
            pulse = pulse + 0.05
            waterDrop.ImageTransparency = 0.1 + math.sin(pulse) * 0.1
            local scale = 0.8 + math.sin(pulse * 2) * 0.05
            waterDrop.Size = UDim2.new(scale, 0, scale, 0)
            waterDrop.Position = UDim2.new((1 - scale) / 2, 0, (1 - scale) / 2, 0)
            wait()
        end
    end)
    
    -- Loading progress simulation
    spawn(function()
        local loadingSteps = {
            {text = "Initializing Water Hub...", progress = 0.1},
            {text = "Loading core modules...", progress = 0.2},
            {text = "Setting up ESP systems...", progress = 0.35},
            {text = "Configuring mobile controls...", progress = 0.5},
            {text = "Activating God Mode...", progress = 0.65},
            {text = "Loading user interface...", progress = 0.8},
            {text = "Finalizing setup...", progress = 0.9},
            {text = "Welcome to Water Hub!", progress = 1}
        }
        
        for i, step in ipairs(loadingSteps) do
            loadingText.Text = step.text
            
            -- Animate loading bar
            local barTween = TweenService:Create(loadingBar,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad),
                {Size = UDim2.new(step.progress, 0, 1, 0)}
            )
            barTween:Play()
            
            wait(0.4)
        end
        
        wait(0.5)
        
        -- Success flash
        local successFlash = Instance.new("Frame")
        successFlash.Size = UDim2.new(1, 0, 1, 36)
        successFlash.Position = UDim2.new(0, 0, 0, -36)
        successFlash.BackgroundColor3 = Color3.fromRGB(0, 255, 100)
        successFlash.BackgroundTransparency = 1
        successFlash.BorderSizePixel = 0
        successFlash.Parent = loadingGui
        
        local flashTween = TweenService:Create(successFlash,
            TweenInfo.new(0.2, Enum.EasingStyle.Linear),
            {BackgroundTransparency = 0.5}
        )
        flashTween:Play()
        
        wait(0.1)
        
        local flashOutTween = TweenService:Create(successFlash,
            TweenInfo.new(0.3, Enum.EasingStyle.Linear),
            {BackgroundTransparency = 1}
        )
        flashOutTween:Play()
        
        -- Fade out animation
        local fadeOut = TweenService:Create(background, 
            TweenInfo.new(0.5, Enum.EasingStyle.Quad),
            {BackgroundTransparency = 1}
        )
        
        local dropFadeOut = TweenService:Create(waterDrop,
            TweenInfo.new(0.5, Enum.EasingStyle.Quad),
            {ImageTransparency = 1}
        )
        
        local glowFadeOut = TweenService:Create(glowEffect,
            TweenInfo.new(0.5, Enum.EasingStyle.Quad),
            {ImageTransparency = 1}
        )
        
        fadeOut:Play()
        dropFadeOut:Play()
        glowFadeOut:Play()
        
        for _, element in pairs(loadingGui:GetDescendants()) do
            if element:IsA("TextLabel") then
                TweenService:Create(element, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
            elseif element:IsA("Frame") and element ~= background then
                TweenService:Create(element, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
            end
        end
        
        wait(0.5)
        
        if spinConnection then
            spinConnection:Disconnect()
        end
        
        loadingGui:Destroy()
        
        -- Automatically open main GUI
        createMainGui()
        
        -- Enable God Mode after GUI is created
        wait(0.1)
        toggleGodMode(true)
    end)
end

-- Enhanced switch for mobile
local function createSwitch(parent, position, callback, initialState)
    local switchFrame = createFrame(parent, UDim2.new(0, isMobile and 60 or 50, 0, isMobile and 30 or 25), position, Color3.fromRGB(70, 70, 70), 0)
    switchFrame.Active = true
    
    local switchButton = createFrame(switchFrame, UDim2.new(0, isMobile and 26 or 21, 0, isMobile and 26 or 21), UDim2.new(0, 2, 0, 2), Color3.fromRGB(255, 255, 255), 0)
    
    local isOn = initialState or false
    
    local function updateVisual(instant)
        local targetPos = isOn and UDim2.new(0, isMobile and 32 or 27, 0, 2) or UDim2.new(0, 2, 0, 2)
        local targetColor = isOn and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(70, 70, 70)
        
        if instant then
            switchButton.Position = targetPos
            switchFrame.BackgroundColor3 = targetColor
        else
            local tween1 = TweenService:Create(switchButton, TweenInfo.new(0.2), {Position = targetPos})
            local tween2 = TweenService:Create(switchFrame, TweenInfo.new(0.2), {BackgroundColor3 = targetColor})
            
            tween1:Play()
            tween2:Play()
        end
    end
    
    local function toggle()
        isOn = not isOn
        updateVisual(false)
        
        if callback then
            callback(isOn)
        end
    end
    
    switchFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            toggle()
        end
    end)
    
    if initialState then
        updateVisual(true)
    end
    
    return switchFrame, toggle
end

-- Enhanced draggable for mobile
local function makeDraggable(frame)
    local dragToggle = nil
    local dragStart = nil
    local startPos = nil
    
    local function updateDrag(input)
        if dragToggle then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragToggle = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            updateDrag(input)
        end
    end)
end

-- God Mode implementation
local function toggleGodMode(enabled)
    states.godMode = enabled
    
    if godModeConnection then
        godModeConnection:Disconnect()
        godModeConnection = nil
    end
    
    if enabled then
        godModeConnection = RunService.Heartbeat:Connect(function()
            local humanoid = getHumanoid()
            if humanoid then
                humanoid.Health = humanoid.MaxHealth
                -- Set humanoid states to prevent death
                pcall(function()
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
                end)
            end
        end)
    end
end

-- Fixed Infinite Jump
local function toggleInfiniteJump(enabled)
    states.infiniteJump = enabled
    
    if connections.infiniteJump then
        connections.infiniteJump:Disconnect()
        connections.infiniteJump = nil
    end
    
    if enabled then
        connections.infiniteJump = UserInputService.JumpRequest:Connect(function()
            local humanoid = getHumanoid()
            if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                task.wait()
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
end

-- Mobile float controller
local function createFloatController()
    if touchGui then touchGui:Destroy() end
    
    touchGui = Instance.new("ScreenGui")
    touchGui.Name = "FloatController"
    touchGui.Parent = CoreGui
    
    local controller = createFrame(touchGui, UDim2.new(0, 150, 0, 150), UDim2.new(0.8, 0, 0.6, 0), Color3.fromRGB(30, 30, 30), 0.3)
    controller.Active = true
    makeDraggable(controller)
    
    -- Create joystick
    local joystickOuter = createFrame(controller, UDim2.new(0.8, 0, 0.8, 0), UDim2.new(0.1, 0, 0.1, 0), Color3.fromRGB(50, 50, 50), 0.3)
    local joystickInner = createFrame(joystickOuter, UDim2.new(0.4, 0, 0.4, 0), UDim2.new(0.3, 0, 0.3, 0), Color3.fromRGB(0, 170, 255), 0)
    
    local dragging = false
    local centerPos = UDim2.new(0.3, 0, 0.3, 0)
    
    floatController = {
        moveVector = Vector3.new(0, 0, 0)
    }
    
    joystickOuter.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    
    joystickOuter.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            joystickInner.Position = centerPos
            floatController.moveVector = Vector3.new(0, 0, 0)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.Touch then
            local relativePos = input.Position - joystickOuter.AbsolutePosition
            local centerX = joystickOuter.AbsoluteSize.X / 2
            local centerY = joystickOuter.AbsoluteSize.Y / 2
            
            local deltaX = (relativePos.X - centerX) / centerX
            local deltaY = (relativePos.Y - centerY) / centerY
            
            deltaX = math.clamp(deltaX, -1, 1)
            deltaY = math.clamp(deltaY, -1, 1)
            
            joystickInner.Position = UDim2.new(0.3 + deltaX * 0.3, 0, 0.3 + deltaY * 0.3, 0)
            
            local camera = workspace.CurrentCamera
            floatController.moveVector = (camera.CFrame.RightVector * deltaX + camera.CFrame.LookVector * -deltaY) * 50
        end
    end)
end

-- Enhanced Float with mobile controller
local function toggleFloat(enabled)
    states.float = enabled
    
    if floatBody then
        floatBody:Destroy()
        floatBody = nil
    end
    
    if touchGui then
        touchGui:Destroy()
        touchGui = nil
    end
    
    if connections.floatUpdate then
        connections.floatUpdate:Disconnect()
        connections.floatUpdate = nil
    end
    
    if enabled then
        local rootPart = getRootPart()
        if rootPart then
            floatBody = Instance.new("BodyPosition")
            floatBody.MaxForce = Vector3.new(4000, 4000, 4000)
            floatBody.Position = rootPart.Position
            floatBody.Parent = rootPart
            
            if isMobile then
                createFloatController()
            end
            
            connections.floatUpdate = RunService.Heartbeat:Connect(function()
                if not floatBody or not floatBody.Parent then
                    states.float = false
                    return
                end
                
                local moveVector = Vector3.new(0, 0, 0)
                
                if isMobile and floatController then
                    moveVector = floatController.moveVector
                else
                    -- PC controls
                    local camera = workspace.CurrentCamera
                    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                        moveVector = moveVector + camera.CFrame.LookVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                        moveVector = moveVector - camera.CFrame.LookVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                        moveVector = moveVector - camera.CFrame.RightVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                        moveVector = moveVector + camera.CFrame.RightVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                        moveVector = moveVector + Vector3.new(0, 1, 0)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                        moveVector = moveVector - Vector3.new(0, 1, 0)
                    end
                    moveVector = moveVector * 50
                end
                
                floatBody.Position = floatBody.Position + moveVector * 0.1
            end)
        end
    end
end

-- Noclip with CFrame
local function toggleNoclip(enabled)
    states.noclip = enabled
    
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    
    if enabled then
        noclipConnection = RunService.Stepped:Connect(function()
            local character = getCharacter()
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
                
                -- CFrame-based movement for smoother noclip
                local rootPart = getRootPart()
                local humanoid = getHumanoid()
                if rootPart and humanoid then
                    local moveVector = humanoid.MoveDirection * humanoid.WalkSpeed
                    rootPart.CFrame = rootPart.CFrame + moveVector * RunService.Stepped:Wait()
                end
            end
        end)
    else
        local character = getCharacter()
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

-- Fly with CFrame
local function toggleFly(enabled)
    states.fly = enabled
    
    if connections.flyControl then
        connections.flyControl:Disconnect()
        connections.flyControl = nil
    end
    
    if enabled then
        connections.flyControl = RunService.Heartbeat:Connect(function()
            local rootPart = getRootPart()
            local humanoid = getHumanoid()
            
            if not rootPart or not humanoid then 
                states.fly = false
                return 
            end
            
            local camera = workspace.CurrentCamera
            local moveVector = Vector3.new(0, 0, 0)
            
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector - camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector - camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveVector = moveVector + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                moveVector = moveVector - Vector3.new(0, 1, 0)
            end
            
            rootPart.CFrame = rootPart.CFrame + moveVector * 0.5
            rootPart.Velocity = Vector3.new(0, 0, 0)
            rootPart.RotVelocity = Vector3.new(0, 0, 0)
        end)
    end
end

-- Advanced ESP system
local function createAdvancedESP(targetPlayer)
    if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local character = targetPlayer.Character
    local rootPart = character.HumanoidRootPart
    
    -- Clean existing ESP
    if espObjects[targetPlayer] then
        for _, obj in pairs(espObjects[targetPlayer]) do
            if obj then obj:Destroy() end
        end
    end
    
    espObjects[targetPlayer] = {}
    
    -- ESP Box
    if states.espBox then
        local box = Instance.new("BoxHandleAdornment")
        box.Size = character:GetExtentsSize()
        box.Color3 = Color3.fromRGB(255, 0, 0)
        box.Transparency = 0.5
        box.AlwaysOnTop = true
        box.ZIndex = 10
        box.Adornee = rootPart
        box.Parent = rootPart
        table.insert(espObjects[targetPlayer], box)
    end
    
    -- ESP Lines
    if states.espLines then
        local line = Instance.new("Beam")
        line.Color = ColorSequence.new(Color3.fromRGB(0, 255, 0))
        line.Transparency = NumberSequence.new(0.5)
        line.Width0 = 0.1
        line.Width1 = 0.1
        line.FaceCamera = true
        
        local attachment0 = Instance.new("Attachment", rootPart)
        local attachment1 = Instance.new("Attachment", getRootPart())
        
        line.Attachment0 = attachment0
        line.Attachment1 = attachment1
        line.Parent = rootPart
        
        table.insert(espObjects[targetPlayer], line)
        table.insert(espObjects[targetPlayer], attachment0)
        table.insert(espObjects[targetPlayer], attachment1)
    end
    
    -- ESP Skeleton
    if states.espSkeleton then
        local function createBone(part1Name, part2Name)
            local part1 = character:FindFirstChild(part1Name)
            local part2 = character:FindFirstChild(part2Name)
            
            if part1 and part2 then
                local beam = Instance.new("Beam")
                beam.Color = ColorSequence.new(Color3.fromRGB(255, 255, 0))
                beam.Transparency = NumberSequence.new(0.3)
                beam.Width0 = 0.1
                beam.Width1 = 0.1
                beam.FaceCamera = true
                
                local att1 = Instance.new("Attachment", part1)
                local att2 = Instance.new("Attachment", part2)
                
                beam.Attachment0 = att1
                beam.Attachment1 = att2
                beam.Parent = part1
                
                table.insert(espObjects[targetPlayer], beam)
                table.insert(espObjects[targetPlayer], att1)
                table.insert(espObjects[targetPlayer], att2)
            end
        end
        
        -- Create skeleton
        createBone("Head", "UpperTorso")
        createBone("UpperTorso", "LowerTorso")
        createBone("UpperTorso", "LeftUpperArm")
        createBone("LeftUpperArm", "LeftLowerArm")
        createBone("LeftLowerArm", "LeftHand")
        createBone("UpperTorso", "RightUpperArm")
        createBone("RightUpperArm", "RightLowerArm")
        createBone("RightLowerArm", "RightHand")
        createBone("LowerTorso", "LeftUpperLeg")
        createBone("LeftUpperLeg", "LeftLowerLeg")
        createBone("LeftLowerLeg", "LeftFoot")
        createBone("LowerTorso", "RightUpperLeg")
        createBone("RightUpperLeg", "RightLowerLeg")
        createBone("RightLowerLeg", "RightFoot")
    end
    
    -- ESP Name
    if states.espNames then
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Adornee = rootPart
        billboardGui.Size = UDim2.new(0, 100, 0, 50)
        billboardGui.StudsOffset = Vector3.new(0, 3, 0)
        billboardGui.AlwaysOnTop = true
        billboardGui.Parent = rootPart
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = targetPlayer.Name
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextScaled = true
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextStrokeTransparency = 0
        nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        nameLabel.Parent = billboardGui
        
        local healthLabel = Instance.new("TextLabel")
        healthLabel.Size = UDim2.new(1, 0, 0.5, 0)
        healthLabel.Position = UDim2.new(0, 0, 0.5, 0)
        healthLabel.BackgroundTransparency = 1
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        healthLabel.Text = humanoid and math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth) or "N/A"
        healthLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
        healthLabel.TextScaled = true
        healthLabel.Font = Enum.Font.SourceSans
        healthLabel.TextStrokeTransparency = 0
        healthLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        healthLabel.Parent = billboardGui
        
        table.insert(espObjects[targetPlayer], billboardGui)
    end
end

local function toggleESP(espType, enabled)
    states[espType] = enabled
    
    -- Clean all ESP
    for player, objects in pairs(espObjects) do
        for _, obj in pairs(objects) do
            if obj then obj:Destroy() end
        end
    end
    espObjects = {}
    
    if connections.espUpdate then
        connections.espUpdate:Disconnect()
        connections.espUpdate = nil
    end
    
    if states.espPlayers or states.espLines or states.espBox or states.espSkeleton or states.espNames then
        connections.espUpdate = RunService.Heartbeat:Connect(function()
            for _, targetPlayer in pairs(Players:GetPlayers()) do
                if targetPlayer ~= player then
                    createAdvancedESP(targetPlayer)
                end
            end
        end)
    end
end

-- Water animation minimized icon
local function createMinimizedIcon()
    if minimizedIcon then
        minimizedIcon:Destroy()
    end
    
    minimizedIcon = Instance.new("ScreenGui")
    minimizedIcon.Name = "WaterHubMinimized"
    minimizedIcon.Parent = CoreGui
    minimizedIcon.ResetOnSpawn = false
    
    local waterDrop = Instance.new("ImageButton")
    waterDrop.Size = UDim2.new(0, isMobile and 80 or 60, 0, isMobile and 80 or 60)
    waterDrop.Position = UDim2.new(0, 10, 0, 10)
    waterDrop.BackgroundTransparency = 1
    waterDrop.Image = "rbxassetid://6034684930"
    waterDrop.ImageColor3 = Color3.fromRGB(0, 170, 255)
    waterDrop.Parent = minimizedIcon
    waterDrop.Active = true
    
    makeDraggable(waterDrop)
    
    -- Water ripple effect
    local rippleTween = TweenService:Create(waterDrop,
        TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
        {Size = UDim2.new(0, (isMobile and 90 or 70), 0, (isMobile and 90 or 70))}
    )
    rippleTween:Play()
    
    -- Glow effect
    spawn(function()
        local glow = 0
        while minimizedIcon and minimizedIcon.Parent do
            glow = glow + 0.05
            waterDrop.ImageTransparency = 0.1 + math.sin(glow) * 0.2
            wait()
        end
    end)
    
    waterDrop.MouseButton1Click:Connect(function()
        -- Water splash animation
        local splash = Instance.new("ImageLabel")
        splash.Size = UDim2.new(0, 20, 0, 20)
        splash.Position = UDim2.new(0.5, -10, 0.5, -10)
        splash.BackgroundTransparency = 1
        splash.Image = "rbxassetid://6034684930"
        splash.ImageColor3 = Color3.fromRGB(0, 170, 255)
        splash.Parent = waterDrop
        
        local splashTween = TweenService:Create(splash,
            TweenInfo.new(0.5, Enum.EasingStyle.Back),
            {Size = UDim2.new(0, 200, 0, 200), Position = UDim2.new(0.5, -100, 0.5, -100), ImageTransparency = 1}
        )
        
        splashTween:Play()
        splashTween.Completed:Connect(function()
            splash:Destroy()
            minimizedIcon:Destroy()
            minimizedIcon = nil
            createMainGui()
        end)
    end)
end

-- Create main GUI
local function createMainGui()
    if waterHubGui then
        waterHubGui:Destroy()
    end
    
    waterHubGui = Instance.new("ScreenGui")
    waterHubGui.Name = "WaterHubMain"
    waterHubGui.Parent = CoreGui
    waterHubGui.ResetOnSpawn = false
    table.insert(openGuis, waterHubGui)
    
    -- Main frame with mobile optimization
    local mainFrame = createFrame(waterHubGui, 
        UDim2.new(0, isMobile and 400 or 350, 0, isMobile and 450 or 300), 
        UDim2.new(0.5, isMobile and -200 or -175, 0.5, isMobile and -225 or -150), 
        Color3.fromRGB(30, 30, 30), 0.05
    )
    mainFrame.Active = true
    makeDraggable(mainFrame)
    
    -- Entrance animation
    mainFrame.Position = UDim2.new(0.5, isMobile and -200 or -175, 1.5, 0)
    local entranceTween = TweenService:Create(mainFrame,
        TweenInfo.new(0.5, Enum.EasingStyle.Back),
        {Position = UDim2.new(0.5, isMobile and -200 or -175, 0.5, isMobile and -225 or -150)}
    )
    entranceTween:Play()
    
    -- Header
    local header = createFrame(mainFrame, UDim2.new(1, 0, 0, isMobile and 45 or 35), UDim2.new(0, 0, 0, 0), Color3.fromRGB(0, 170, 255), 0)
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(0, 200, 1, 0)
    title.Position = UDim2.new(0, 10, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "💧 Water Hub"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = header
    
    -- Minimize button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Size = UDim2.new(0, isMobile and 35 or 25, 0, isMobile and 35 or 25)
    minimizeBtn.Position = UDim2.new(1, isMobile and -80 or -55, 0, 5)
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(255, 193, 7)
    minimizeBtn.Text = "➖"
    minimizeBtn.TextScaled = true
    minimizeBtn.Font = Enum.Font.SourceSansBold
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Parent = header
    
    local minimizeCorner = Instance.new("UICorner")
    minimizeCorner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
    minimizeCorner.Parent = minimizeBtn
    
    -- Close button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, isMobile and 35 or 25, 0, isMobile and 35 or 25)
    closeBtn.Position = UDim2.new(1, isMobile and -40 or -25, 0, 5)
    closeBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
    closeBtn.Text = "❌"
    closeBtn.TextScaled = true
    closeBtn.Font = Enum.Font.SourceSansBold
    closeBtn.BorderSizePixel = 0
    closeBtn.Parent = header
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
    closeCorner.Parent = closeBtn
    
    -- Tab system
    local tabsFrame = createFrame(mainFrame, UDim2.new(1, -20, 0, isMobile and 40 or 30), UDim2.new(0, 10, 0, isMobile and 55 or 45), Color3.fromRGB(40, 40, 40), 0)
    
    local tabs = {"Main", "Visual", "Misc", "Server"}
    local tabButtons = {}
    local contentFrames = {}
    
    for i, tabName in ipairs(tabs) do
        local tabBtn = Instance.new("TextButton")
        tabBtn.Size = UDim2.new(0.25, -2, 1, 0)
        tabBtn.Position = UDim2.new((i-1) * 0.25, 1, 0, 0)
        tabBtn.BackgroundColor3 = (i == 1) and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(60, 60, 60)
        tabBtn.Text = tabName
        tabBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabBtn.TextScaled = true
        tabBtn.Font = Enum.Font.SourceSans
        tabBtn.BorderSizePixel = 0
        tabBtn.Parent = tabsFrame
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
        corner.Parent = tabBtn
        
        tabButtons[i] = tabBtn
        
        -- Content frame
        local contentFrame = createFrame(mainFrame, 
            UDim2.new(1, -20, 0, isMobile and 340 or 190), 
            UDim2.new(0, 10, 0, isMobile and 105 or 85), 
            Color3.fromRGB(35, 35, 35), 0
        )
        contentFrame.Visible = (i == 1)
        contentFrames[i] = contentFrame
    end
    
    -- Tab switching
    for i, btn in ipairs(tabButtons) do
        btn.MouseButton1Click:Connect(function()
            for j, frame in ipairs(contentFrames) do
                frame.Visible = (j == i)
            end
            for j, button in ipairs(tabButtons) do
                button.BackgroundColor3 = (j == i) and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(60, 60, 60)
            end
        end)
    end
    
    -- MAIN TAB CONTENT
    local mainContent = contentFrames[1]
    
    -- God Mode
    local godLabel = Instance.new("TextLabel")
    godLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    godLabel.Position = UDim2.new(0, 15, 0, 15)
    godLabel.BackgroundTransparency = 1
    godLabel.Text = "🛡️ God Mode"
    godLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    godLabel.TextScaled = true
    godLabel.Font = Enum.Font.SourceSans
    godLabel.TextXAlignment = Enum.TextXAlignment.Left
    godLabel.Parent = mainContent
    
    local godSwitch = createSwitch(mainContent, UDim2.new(1, isMobile and -75 or -65, 0, 15), function(enabled)
        toggleGodMode(enabled)
    end, states.godMode)
    
    -- Infinite Jump
    local ijLabel = Instance.new("TextLabel")
    ijLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    ijLabel.Position = UDim2.new(0, 15, 0, isMobile and 55 or 45)
    ijLabel.BackgroundTransparency = 1
    ijLabel.Text = "🦘 Infinite Jump"
    ijLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ijLabel.TextScaled = true
    ijLabel.Font = Enum.Font.SourceSans
    ijLabel.TextXAlignment = Enum.TextXAlignment.Left
    ijLabel.Parent = mainContent
    
    local ijSwitch = createSwitch(mainContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 55 or 45), function(enabled)
        toggleInfiniteJump(enabled)
    end, states.infiniteJump)
    
    -- Float
    local floatLabel = Instance.new("TextLabel")
    floatLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    floatLabel.Position = UDim2.new(0, 15, 0, isMobile and 95 or 75)
    floatLabel.BackgroundTransparency = 1
    floatLabel.Text = "🎈 Float (Mobile)"
    floatLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    floatLabel.TextScaled = true
    floatLabel.Font = Enum.Font.SourceSans
    floatLabel.TextXAlignment = Enum.TextXAlignment.Left
    floatLabel.Parent = mainContent
    
    local floatSwitch = createSwitch(mainContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 95 or 75), function(enabled)
        toggleFloat(enabled)
    end, states.float)
    
    -- Speed Boost
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    speedLabel.Position = UDim2.new(0, 15, 0, isMobile and 135 or 105)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = "⚡ Speed Boost"
    speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    speedLabel.TextScaled = true
    speedLabel.Font = Enum.Font.SourceSans
    speedLabel.TextXAlignment = Enum.TextXAlignment.Left
    speedLabel.Parent = mainContent
    
    local speedSwitch = createSwitch(mainContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 135 or 105), function(enabled)
        toggleSpeedBoost(enabled)
    end, states.speedBoost)
    
    -- Noclip
    local noclipLabel = Instance.new("TextLabel")
    noclipLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    noclipLabel.Position = UDim2.new(0, 15, 0, isMobile and 175 or 135)
    noclipLabel.BackgroundTransparency = 1
    noclipLabel.Text = "👻 Noclip (CFrame)"
    noclipLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    noclipLabel.TextScaled = true
    noclipLabel.Font = Enum.Font.SourceSans
    noclipLabel.TextXAlignment = Enum.TextXAlignment.Left
    noclipLabel.Parent = mainContent
    
    local noclipSwitch = createSwitch(mainContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 175 or 135), function(enabled)
        toggleNoclip(enabled)
    end, states.noclip)
    
    -- Fly
    local flyLabel = Instance.new("TextLabel")
    flyLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    flyLabel.Position = UDim2.new(0, 15, 0, isMobile and 215 or 165)
    flyLabel.BackgroundTransparency = 1
    flyLabel.Text = "✈️ Fly (CFrame)"
    flyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    flyLabel.TextScaled = true
    flyLabel.Font = Enum.Font.SourceSans
    flyLabel.TextXAlignment = Enum.TextXAlignment.Left
    flyLabel.Parent = mainContent
    
    local flySwitch = createSwitch(mainContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 215 or 165), function(enabled)
        toggleFly(enabled)
    end, states.fly)
    
    -- Teleport Button
    local tpBtn = Instance.new("TextButton")
    tpBtn.Size = UDim2.new(0, isMobile and 150 or 120, 0, isMobile and 40 or 25)
    tpBtn.Position = UDim2.new(0, 15, 0, isMobile and 265 or 195)
    tpBtn.BackgroundColor3 = Color3.fromRGB(138, 43, 226)
    tpBtn.Text = "🚀 Teleport"
    tpBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    tpBtn.TextScaled = true
    tpBtn.Font = Enum.Font.SourceSansBold
    tpBtn.BorderSizePixel = 0
    tpBtn.Parent = mainContent
    
    local tpCorner = Instance.new("UICorner")
    tpCorner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
    tpCorner.Parent = tpBtn
    
    -- VISUAL TAB CONTENT
    local visualContent = contentFrames[2]
    
    -- ESP Box
    local espBoxLabel = Instance.new("TextLabel")
    espBoxLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    espBoxLabel.Position = UDim2.new(0, 15, 0, 15)
    espBoxLabel.BackgroundTransparency = 1
    espBoxLabel.Text = "📦 ESP Box"
    espBoxLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    espBoxLabel.TextScaled = true
    espBoxLabel.Font = Enum.Font.SourceSans
    espBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
    espBoxLabel.Parent = visualContent
    
    local espBoxSwitch = createSwitch(visualContent, UDim2.new(1, isMobile and -75 or -65, 0, 15), function(enabled)
        toggleESP("espBox", enabled)
    end, states.espBox)
    
    -- ESP Lines
    local espLineLabel = Instance.new("TextLabel")
    espLineLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    espLineLabel.Position = UDim2.new(0, 15, 0, isMobile and 55 or 45)
    espLineLabel.BackgroundTransparency = 1
    espLineLabel.Text = "📐 ESP Lines"
    espLineLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    espLineLabel.TextScaled = true
    espLineLabel.Font = Enum.Font.SourceSans
    espLineLabel.TextXAlignment = Enum.TextXAlignment.Left
    espLineLabel.Parent = visualContent
    
    local espLineSwitch = createSwitch(visualContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 55 or 45), function(enabled)
        toggleESP("espLines", enabled)
    end, states.espLines)
    
    -- ESP Skeleton
    local espSkeletonLabel = Instance.new("TextLabel")
    espSkeletonLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    espSkeletonLabel.Position = UDim2.new(0, 15, 0, isMobile and 95 or 75)
    espSkeletonLabel.BackgroundTransparency = 1
    espSkeletonLabel.Text = "💀 ESP Skeleton"
    espSkeletonLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    espSkeletonLabel.TextScaled = true
    espSkeletonLabel.Font = Enum.Font.SourceSans
    espSkeletonLabel.TextXAlignment = Enum.TextXAlignment.Left
    espSkeletonLabel.Parent = visualContent
    
    local espSkeletonSwitch = createSwitch(visualContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 95 or 75), function(enabled)
        toggleESP("espSkeleton", enabled)
    end, states.espSkeleton)
    
    -- ESP Names
    local espNameLabel = Instance.new("TextLabel")
    espNameLabel.Size = UDim2.new(0, 200, 0, isMobile and 35 or 25)
    espNameLabel.Position = UDim2.new(0, 15, 0, isMobile and 135 or 105)
    espNameLabel.BackgroundTransparency = 1
    espNameLabel.Text = "🏷️ ESP Names"
    espNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    espNameLabel.TextScaled = true
    espNameLabel.Font = Enum.Font.SourceSans
    espNameLabel.TextXAlignment = Enum.TextXAlignment.Left
    espNameLabel.Parent = visualContent
    
    local espNameSwitch = createSwitch(visualContent, UDim2.new(1, isMobile and -75 or -65, 0, isMobile and 135 or 105), function(enabled)
        toggleESP("espNames", enabled)
    end, states.espNames)
    
    -- MISC TAB CONTENT
    local miscContent = contentFrames[3]
    
    local miscLabel = Instance.new("TextLabel")
    miscLabel.Size = UDim2.new(1, -20, 0, isMobile and 40 or 30)
    miscLabel.Position = UDim2.new(0, 10, 0, 15)
    miscLabel.BackgroundTransparency = 1
    miscLabel.Text = "🛠️ Utility Features"
    miscLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    miscLabel.TextScaled = true
    miscLabel.Font = Enum.Font.SourceSansItalic
    miscLabel.Parent = miscContent
    
    -- SERVER TAB CONTENT
    local serverContent = contentFrames[4]
    
    -- Rejoin button
    local rejoinBtn = Instance.new("TextButton")
    rejoinBtn.Size = UDim2.new(1, -20, 0, isMobile and 45 or 35)
    rejoinBtn.Position = UDim2.new(0, 10, 0, 15)
    rejoinBtn.BackgroundColor3 = Color3.fromRGB(0, 123, 255)
    rejoinBtn.Text = "🔄 Rejoin"
    rejoinBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    rejoinBtn.TextScaled = true
    rejoinBtn.Font = Enum.Font.SourceSansBold
    rejoinBtn.BorderSizePixel = 0
    rejoinBtn.Parent = serverContent
    
    local rejoinCorner = Instance.new("UICorner")
    rejoinCorner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
    rejoinCorner.Parent = rejoinBtn
    
    -- Leave button
    local leaveBtn = Instance.new("TextButton")
    leaveBtn.Size = UDim2.new(1, -20, 0, isMobile and 45 or 35)
    leaveBtn.Position = UDim2.new(0, 10, 0, isMobile and 70 or 60)
    leaveBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
    leaveBtn.Text = "🚪 Leave"
    leaveBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    leaveBtn.TextScaled = true
    leaveBtn.Font = Enum.Font.SourceSansBold
    leaveBtn.BorderSizePixel = 0
    leaveBtn.Parent = serverContent
    
    local leaveCorner = Instance.new("UICorner")
    leaveCorner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
    leaveCorner.Parent = leaveBtn
    
    -- Server Hop button
    local hopBtn = Instance.new("TextButton")
    hopBtn.Size = UDim2.new(1, -20, 0, isMobile and 45 or 35)
    hopBtn.Position = UDim2.new(0, 10, 0, isMobile and 125 or 105)
    hopBtn.BackgroundColor3 = Color3.fromRGB(40, 167, 69)
    hopBtn.Text = "🌐 Server Hop"
    hopBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    hopBtn.TextScaled = true
    hopBtn.Font = Enum.Font.SourceSansBold
    hopBtn.BorderSizePixel = 0
    hopBtn.Parent = serverContent
    
    local hopCorner = Instance.new("UICorner")
    hopCorner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
    hopCorner.Parent = hopBtn
    
    -- Event handlers
    closeBtn.MouseButton1Click:Connect(function()
        -- Close all open GUIs
        for _, gui in pairs(openGuis) do
            if gui and gui.Parent then
                gui:Destroy()
            end
        end
        openGuis = {}
        
        -- Disable all features
        for stateName, _ in pairs(states) do
            if states[stateName] then
                if stateName == "infiniteJump" then
                    toggleInfiniteJump(false)
                elseif stateName == "float" then
                    toggleFloat(false)
                elseif stateName == "speedBoost" then
                    toggleSpeedBoost(false)
                elseif stateName == "noclip" then
                    toggleNoclip(false)
                elseif stateName == "fly" then
                    toggleFly(false)
                elseif stateName == "godMode" then
                    toggleGodMode(false)
                elseif stateName:find("esp") then
                    toggleESP(stateName, false)
                end
            end
        end
        
        waterHubGui:Destroy()
        if minimizedIcon then
            minimizedIcon:Destroy()
        end
    end)
    
    minimizeBtn.MouseButton1Click:Connect(function()
        waterHubGui:Destroy()
        createMinimizedIcon()
    end)
    
    tpBtn.MouseButton1Click:Connect(function()
        createTeleportGui()
    end)
    
    -- Server buttons
    rejoinBtn.MouseButton1Click:Connect(function()
        TeleportService:Teleport(game.PlaceId, player)
    end)
    
    leaveBtn.MouseButton1Click:Connect(function()
        player:Kick("Left the game")
    end)
    
    hopBtn.MouseButton1Click:Connect(function()
        local servers = {}
        local req = syn and syn.request or http_request or request
        
        if req then
            local response = req({
                Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
            })
            
            if response.Success then
                local data = HttpService:JSONDecode(response.Body)
                for _, server in pairs(data.data) do
                    if server.playing < server.maxPlayers and server.id ~= game.JobId then
                        table.insert(servers, server.id)
                    end
                end
                
                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
                end
            end
        end
    end)
end

-- Speed boost implementation
local function toggleSpeedBoost(enabled)
    states.speedBoost = enabled
    local humanoid = getHumanoid()
    
    if humanoid then
        if enabled then
            originalWalkSpeed = humanoid.WalkSpeed
            humanoid.WalkSpeed = 100
        else
            humanoid.WalkSpeed = originalWalkSpeed
        end
    end
end

-- Teleport GUI (without height)
function createTeleportGui()
    local tpGui = Instance.new("ScreenGui")
    tpGui.Name = "TeleportGui"
    tpGui.Parent = CoreGui
    table.insert(openGuis, tpGui)
    
    local tpFrame = createFrame(tpGui, UDim2.new(0, isMobile and 250 or 200, 0, isMobile and 120 or 100), UDim2.new(0.5, isMobile and -125 or -100, 0.3, 0), Color3.fromRGB(40, 40, 40), 0.1)
    tpFrame.Active = true
    makeDraggable(tpFrame)
    
    local tpTitle = Instance.new("TextLabel")
    tpTitle.Size = UDim2.new(1, -40, 0, isMobile and 35 or 30)
    tpTitle.Position = UDim2.new(0, 10, 0, 5)
    tpTitle.BackgroundTransparency = 1
    tpTitle.Text = "🚀 Teleport"
    tpTitle.TextColor3 = Color3.fromRGB(0, 170, 255)
    tpTitle.TextScaled = true
    tpTitle.Font = Enum.Font.SourceSansBold
    tpTitle.Parent = tpFrame
    
    local closeTPBtn = Instance.new("TextButton")
    closeTPBtn.Size = UDim2.new(0, isMobile and 30 or 25, 0, isMobile and 30 or 25)
    closeTPBtn.Position = UDim2.new(1, isMobile and -35 or -30, 0, 5)
    closeTPBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
    closeTPBtn.Text = "❌"
    closeTPBtn.TextScaled = true
    closeTPBtn.BorderSizePixel = 0
    closeTPBtn.Parent = tpFrame
    
    local upBtn = Instance.new("TextButton")
    upBtn.Size = UDim2.new(0, isMobile and 100 or 80, 0, isMobile and 40 or 30)
    upBtn.Position = UDim2.new(0, 20, 0, isMobile and 50 or 45)
    upBtn.BackgroundColor3 = Color3.fromRGB(40, 167, 69)
    upBtn.Text = "⬆️ UP"
    upBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    upBtn.TextScaled = true
    upBtn.Font = Enum.Font.SourceSansBold
    upBtn.BorderSizePixel = 0
    upBtn.Parent = tpFrame
    
    local downBtn = Instance.new("TextButton")
    downBtn.Size = UDim2.new(0, isMobile and 100 or 80, 0, isMobile and 40 or 30)
    downBtn.Position = UDim2.new(0, isMobile and 130 or 110, 0, isMobile and 50 or 45)
    downBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
    downBtn.Text = "⬇️ DOWN"
    downBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    downBtn.TextScaled = true
    downBtn.Font = Enum.Font.SourceSansBold
    downBtn.BorderSizePixel = 0
    downBtn.Parent = tpFrame
    
    -- Corners
    for _, btn in pairs({closeTPBtn, upBtn, downBtn}) do
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, isMobile and 8 or 6)
        corner.Parent = btn
    end
    
    -- Events
    closeTPBtn.MouseButton1Click:Connect(function()
        tpGui:Destroy()
    end)
    
    upBtn.MouseButton1Click:Connect(function()
        local rootPart = getRootPart()
        if rootPart then
            rootPart.CFrame = rootPart.CFrame + Vector3.new(0, 50, 0)
        end
    end)
    
    downBtn.MouseButton1Click:Connect(function()
        local rootPart = getRootPart()
        if rootPart then
            rootPart.CFrame = rootPart.CFrame - Vector3.new(0, 50, 0)
        end
    end)
end

-- Character respawn handling
local function onCharacterAdded(character)
    wait(0.5)
    
    -- Reapply active states
    if states.godMode then
        toggleGodMode(true)
    end
    if states.speedBoost then
        toggleSpeedBoost(true)
    end
    if states.infiniteJump then
        toggleInfiniteJump(true)
    end
    if states.float then
        toggleFloat(true)
    end
    if states.noclip then
        toggleNoclip(true)
    end
    if states.fly then
        toggleFly(true)
    end
end

-- Cleanup
Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == player then
        for _, connection in pairs(connections) do
            if connection and connection.Disconnect then
                connection:Disconnect()
            end
        end
        if floatBody then floatBody:Destroy() end
        if flyBody then flyBody:Destroy() end
        if characterAddedConnection then
            characterAddedConnection:Disconnect()
        end
    end
end)

-- Setup character respawn handler
characterAddedConnection = player.CharacterAdded:Connect(onCharacterAdded)

-- Initialize with loading screen
spawn(function()
    wait(0.1)
    createLoadingScreen()
end)
