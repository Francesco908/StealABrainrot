-- Water Hub Script - Rayfield Optimized Edition v5.2
-- Using Rayfield library for optimized performance without lag

-- Load Rayfield library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local StarterGui = game:GetService("StarterGui")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Variables
local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Global state management
local connections = {}
local states = {
    infiniteJump = false,
    speedBoost = false,
    espBox = false,
    espLines = false,
    espSkeleton = false,
    espNames = false,
    noclip = false,
    fly = false,
    godMode = true,
    float = false,
    antiKick = true,
    antiBan = true
}

local basePosition = nil
local originalWalkSpeed = 16
local originalJumpPower = 50
local espObjects = {}
local flyPart = nil
local floatBody = nil
local minimizedIcon = nil

-- Advanced Anticheat Bypass Setup
local function setupBypass()
    pcall(function()
        -- Method 1: Advanced metatable protection
        local mt = getrawmetatable(game)
        if mt then
            local oldIndex = mt.__index
            local oldNewIndex = mt.__newindex
            
            setreadonly(mt, false)
            
            mt.__index = newcclosure(function(self, key)
                if checkcaller() then
                    return oldIndex(self, key)
                end
                
                if tostring(self) == "Humanoid" then
                    if key == "WalkSpeed" then
                        return 16
                    elseif key == "JumpPower" then
                        return 50
                    end
                end
                
                return oldIndex(self, key)
            end)
            
            mt.__newindex = newcclosure(function(self, key, value)
                if checkcaller() then
                    return oldNewIndex(self, key, value)
                end
                
                if key == "WalkSpeed" or key == "JumpPower" or key == "HipHeight" then
                    return
                end
                
                return oldNewIndex(self, key, value)
            end)
            
            setreadonly(mt, true)
        end
    end)
    
    -- Method 2: Anti-idle
    player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), camera.CFrame)
        wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), camera.CFrame)
    end)
    
    -- Method 3: Disable error reporting
    pcall(function()
        for _, v in pairs(getconnections(game.Close)) do
            v:Disable()
        end
    end)
end

-- Utility Functions
local function getCharacter()
    return player.Character or player.CharacterAdded:Wait()
end

local function getHumanoid()
    local char = getCharacter()
    return char and char:FindFirstChildOfClass("Humanoid")
end

local function getRootPart()
    local char = getCharacter()
    return char and (char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso"))
end

-- Feature Functions
local function toggleGodMode(enabled)
    states.godMode = enabled
    
    if connections.godMode then
        connections.godMode:Disconnect()
        connections.godMode = nil
    end
    
    if enabled then
        connections.godMode = RunService.Heartbeat:Connect(function()
            local humanoid = getHumanoid()
            if humanoid then
                humanoid.Health = humanoid.MaxHealth
                
                pcall(function()
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
                end)
                
                local char = getCharacter()
                if char and not char:FindFirstChild("ForceField") then
                    local ff = Instance.new("ForceField")
                    ff.Visible = false
                    ff.Parent = char
                end
            end
        end)
    end
end

local function toggleInfiniteJump(enabled)
    states.infiniteJump = enabled
    
    if connections.infiniteJump then
        connections.infiniteJump:Disconnect()
        connections.infiniteJump = nil
    end
    
    if connections.jumpHeight then
        connections.jumpHeight:Disconnect()
        connections.jumpHeight = nil
    end
    
    if enabled then
        connections.infiniteJump = UserInputService.JumpRequest:Connect(function()
            local humanoid = getHumanoid()
            local rootPart = getRootPart()
            
            if humanoid and rootPart and humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                
                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                bodyVelocity.Velocity = Vector3.new(0, 60, 0)
                bodyVelocity.Parent = rootPart
                
                game:GetService("Debris"):AddItem(bodyVelocity, 0.1)
            end
        end)
        
        connections.jumpHeight = RunService.Heartbeat:Connect(function()
            local humanoid = getHumanoid()
            if humanoid then
                humanoid.JumpPower = 50
                humanoid.JumpHeight = 7.2
            end
        end)
    end
end

local function toggleSpeedBoost(enabled)
    states.speedBoost = enabled
    
    if connections.speedBoost then
        connections.speedBoost:Disconnect()
        connections.speedBoost = nil
    end
    
    if enabled then
        connections.speedBoost = RunService.Heartbeat:Connect(function()
            local humanoid = getHumanoid()
            local rootPart = getRootPart()
            
            if humanoid and rootPart then
                humanoid.WalkSpeed = 25
                
                if humanoid.MoveDirection.Magnitude > 0 then
                    local moveDirection = humanoid.MoveDirection.Unit
                    rootPart.Velocity = Vector3.new(
                        moveDirection.X * 25,
                        rootPart.Velocity.Y,
                        moveDirection.Z * 25
                    )
                end
            end
        end)
    else
        local humanoid = getHumanoid()
        if humanoid then
            humanoid.WalkSpeed = originalWalkSpeed
        end
    end
end

local function toggleNoclip(enabled)
    states.noclip = enabled
    
    if connections.noclip then
        connections.noclip:Disconnect()
        connections.noclip = nil
    end
    
    if enabled then
        connections.noclip = RunService.Stepped:Connect(function()
            local character = getCharacter()
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        local character = getCharacter()
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.CanCollide = true
                end
            end
        end
    end
end

local function toggleFly(enabled)
    states.fly = enabled
    
    if connections.flyControl then
        connections.flyControl:Disconnect()
        connections.flyControl = nil
    end
    
    if flyPart then
        flyPart:Destroy()
        flyPart = nil
    end
    
    if enabled then
        flyPart = Instance.new("Part")
        flyPart.Size = Vector3.new(5, 0.2, 5)
        flyPart.Transparency = 1
        flyPart.CanCollide = true
        flyPart.Anchored = true
        flyPart.Name = "FlyPart"
        flyPart.Parent = Workspace
        
        connections.flyControl = RunService.Heartbeat:Connect(function()
            local rootPart = getRootPart()
            local humanoid = getHumanoid()
            
            if not rootPart or not humanoid or not flyPart then 
                states.fly = false
                return 
            end
            
            flyPart.CFrame = CFrame.new(rootPart.Position - Vector3.new(0, 3.5, 0))
            
            local cam = Workspace.CurrentCamera
            local moveVector = Vector3.new(0, 0, 0)
            
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + cam.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector - cam.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector - cam.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + cam.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveVector = moveVector + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                moveVector = moveVector - Vector3.new(0, 1, 0)
            end
            
            local speed = 50
            rootPart.Velocity = moveVector * speed
            rootPart.CFrame = CFrame.new(rootPart.Position) * CFrame.Angles(0, math.rad(rootPart.Orientation.Y), 0)
        end)
    else
        if flyPart then
            flyPart:Destroy()
            flyPart = nil
        end
        
        local rootPart = getRootPart()
        if rootPart then
            rootPart.Velocity = Vector3.new(0, 0, 0)
        end
    end
end

local function toggleFloat(enabled)
    states.float = enabled
    
    if connections.float then
        connections.float:Disconnect()
        connections.float = nil
    end
    
    if floatBody then
        floatBody:Destroy()
        floatBody = nil
    end
    
    if enabled then
        local rootPart = getRootPart()
        if rootPart then
            floatBody = Instance.new("BodyPosition")
            floatBody.MaxForce = Vector3.new(0, math.huge, 0)
            floatBody.Position = rootPart.Position
            floatBody.Parent = rootPart
            
            connections.float = RunService.Heartbeat:Connect(function()
                if floatBody and rootPart then
                    floatBody.Position = rootPart.Position
                end
            end)
        end
    end
end

-- ESP Functions
local function createAdvancedESP(targetPlayer)
    if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local character = targetPlayer.Character
    local rootPart = character.HumanoidRootPart
    
    if espObjects[targetPlayer] then
        for _, obj in pairs(espObjects[targetPlayer]) do
            if obj then obj:Destroy() end
        end
    end
    
    espObjects[targetPlayer] = {}
    
    if states.espBox then
        local box = Instance.new("BoxHandleAdornment")
        box.Size = character:GetExtentsSize()
        box.Color3 = Color3.fromRGB(255, 100, 100)
        box.Transparency = 0.3
        box.AlwaysOnTop = true
        box.ZIndex = 10
        box.Adornee = rootPart
        box.Parent = rootPart
        table.insert(espObjects[targetPlayer], box)
    end
    
    if states.espLines then
        local myRoot = getRootPart()
        if myRoot then
            local beam = Instance.new("Beam")
            beam.Color = ColorSequence.new(Color3.fromRGB(100, 255, 100))
            beam.Transparency = NumberSequence.new(0.5)
            beam.Width0 = 0.1
            beam.Width1 = 0.1
            beam.FaceCamera = true
            
            local attachment0 = Instance.new("Attachment", rootPart)
            local attachment1 = Instance.new("Attachment", myRoot)
            
            beam.Attachment0 = attachment0
            beam.Attachment1 = attachment1
            beam.Parent = rootPart
            
            table.insert(espObjects[targetPlayer], beam)
            table.insert(espObjects[targetPlayer], attachment0)
            table.insert(espObjects[targetPlayer], attachment1)
        end
    end
    
    if states.espNames then
        local billboard = Instance.new("BillboardGui")
        billboard.Adornee = rootPart
        billboard.Size = UDim2.new(0, 200, 0, 80)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.Parent = rootPart
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = targetPlayer.Name
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextScaled = true
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextStrokeTransparency = 0
        nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        nameLabel.Parent = billboard
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local healthLabel = Instance.new("TextLabel")
            healthLabel.Size = UDim2.new(1, 0, 0.5, 0)
            healthLabel.Position = UDim2.new(0, 0, 0.5, 0)
            healthLabel.BackgroundTransparency = 1
            healthLabel.Text = math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
            healthLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
            healthLabel.TextScaled = true
            healthLabel.Font = Enum.Font.SourceSans
            healthLabel.TextStrokeTransparency = 0
            healthLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
            healthLabel.Parent = billboard
        end
        
        table.insert(espObjects[targetPlayer], billboard)
    end
end

local function toggleESP(espType, enabled)
    states[espType] = enabled
    
    for player, objects in pairs(espObjects) do
        for _, obj in pairs(objects) do
            if obj then obj:Destroy() end
        end
    end
    espObjects = {}
    
    if connections.espUpdate then
        connections.espUpdate:Disconnect()
        connections.espUpdate = nil
    end
    
    if states.espBox or states.espLines or states.espSkeleton or states.espNames then
        connections.espUpdate = RunService.Heartbeat:Connect(function()
            for _, targetPlayer in pairs(Players:GetPlayers()) do
                if targetPlayer ~= player then
                    createAdvancedESP(targetPlayer)
                end
            end
        end)
    end
end

-- Base System Functions
local function teleportToBase()
    if not basePosition then
        Rayfield:Notify({
            Title = "Water Hub",
            Content = "Please set a base position first!",
            Duration = 3,
            Image = 4483362458
        })
        return false
    end
    
    local rootPart = getRootPart()
    local humanoid = getHumanoid()
    if not rootPart or not humanoid then
        return false
    end
    
    local wasNoclip = states.noclip
    if not wasNoclip then toggleNoclip(true) end
    
    rootPart.CFrame = CFrame.new(rootPart.Position.X, 165, rootPart.Position.Z)
    wait(2)
    
    local targetPosition = Vector3.new(basePosition.X, 165, basePosition.Z)
    local startPosition = rootPart.Position
    local distance = (targetPosition - startPosition).Magnitude
    
    local flyConnection
    local elapsed = 0
    local flyDuration = math.max(distance / 50, 1)
    
    flyConnection = RunService.Heartbeat:Connect(function(dt)
        elapsed = elapsed + dt
        local progress = math.min(elapsed / flyDuration, 1)
        
        local newPosition = startPosition:Lerp(targetPosition, progress)
        rootPart.CFrame = CFrame.new(newPosition)
        rootPart.Velocity = Vector3.new(0, 0, 0)
        
        if progress >= 1 then
            flyConnection:Disconnect()
        end
    end)
    
    wait(flyDuration + 2)
    
    if not wasNoclip then toggleNoclip(false) end
    
    -- Create down button
    local downGui = Instance.new("ScreenGui")
    downGui.Name = "DownButton"
    downGui.Parent = CoreGui
    downGui.ResetOnSpawn = false
    
    local downBtn = Instance.new("TextButton")
    downBtn.Size = UDim2.new(0, 150, 0, 60)
    downBtn.Position = UDim2.new(0.5, -75, 0.5, -30)
    downBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
    downBtn.Text = "⬇️ Down"
    downBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    downBtn.TextScaled = true
    downBtn.Font = Enum.Font.SourceSansBold
    downBtn.BorderSizePixel = 0
    downBtn.Parent = downGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = downBtn
    
    downBtn.MouseButton1Click:Connect(function()
        if basePosition then
            rootPart.CFrame = CFrame.new(basePosition)
            downGui:Destroy()
        end
    end)
    
    return true
end

-- Give All Items Function
local function giveAllItems()
    local character = getCharacter()
    if not character then return 0 end
    
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return 0 end
    
    local rootPart = getRootPart()
    if not rootPart then return 0 end
    
    local collected = 0
    
    local function collectItem(obj)
        if obj:IsA("Tool") and not obj.Parent:IsA("Model") then
            pcall(function()
                obj.Parent = backpack
                collected = collected + 1
            end)
        end
        
        if obj:IsA("BasePart") then
            local name = obj.Name:lower()
            if name:match("item") or name:match("coin") or name:match("collectible") or 
               name:match("pickup") or name:match("drop") or name:match("loot") then
                pcall(function()
                    obj.CFrame = rootPart.CFrame
                    collected = collected + 1
                end)
                
                pcall(function()
                    firetouchinterest(rootPart, obj, 0)
                    wait()
                    firetouchinterest(rootPart, obj, 1)
                end)
            end
        end
        
        if obj:IsA("ProximityPrompt") then
            pcall(function()
                fireproximityprompt(obj)
                collected = collected + 1
            end)
        end
        
        if obj:IsA("ClickDetector") then
            pcall(function()
                fireclickdetector(obj)
                collected = collected + 1
            end)
        end
    end
    
    for _, obj in ipairs(Workspace:GetDescendants()) do
        collectItem(obj)
    end
    
    for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("Tool") then
            pcall(function()
                local clone = obj:Clone()
                clone.Parent = backpack
                collected = collected + 1
            end)
        end
    end
    
    return collected
end

-- Minimized Icon
local function createMinimizedIcon()
    if minimizedIcon then
        minimizedIcon:Destroy()
    end
    
    minimizedIcon = Instance.new("ScreenGui")
    minimizedIcon.Name = "WaterHubMinimized"
    minimizedIcon.Parent = CoreGui
    minimizedIcon.ResetOnSpawn = false
    
    local waterDrop = Instance.new("ImageButton")
    waterDrop.Size = UDim2.new(0, 80, 0, 80)
    waterDrop.Position = UDim2.new(0, 20, 0, 20)
    waterDrop.BackgroundTransparency = 1
    waterDrop.Image = "rbxassetid://6034684930"
    waterDrop.ImageColor3 = Color3.fromRGB(0, 170, 255)
    waterDrop.Parent = minimizedIcon
    waterDrop.Active = true
    
    -- Make draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    waterDrop.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = waterDrop.Position
        end
    end)
    
    waterDrop.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            waterDrop.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Animation
    spawn(function()
        local rotation = 0
        while minimizedIcon and minimizedIcon.Parent do
            rotation = rotation + 2
            waterDrop.Rotation = rotation
            RunService.Heartbeat:Wait()
        end
    end)
    
    waterDrop.MouseButton1Click:Connect(function()
        minimizedIcon:Destroy()
        minimizedIcon = nil
        -- Recreate the main GUI
        createWaterHubGUI()
    end)
end

-- Main GUI Creation with Rayfield
function createWaterHubGUI()
    local Window = Rayfield:CreateWindow({
        Name = "💧 Water Hub - Ultimate Edition v5.2",
        LoadingTitle = "Loading Water Hub...",
        LoadingSubtitle = "by Water Team",
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "WaterHub",
            FileName = "WaterHubConfig"
        },
        Discord = {
            Enabled = false,
            Invite = "noinvitelink",
            RememberJoins = true
        },
        KeySystem = false
    })
    
    -- Main Tab
    local MainTab = Window:CreateTab("🛡️ Main", 4483362458)
    
    local GodModeToggle = MainTab:CreateToggle({
        Name = "🛡️ God Mode",
        CurrentValue = states.godMode,
        Flag = "GodModeToggle",
        Callback = function(Value)
            toggleGodMode(Value)
        end,
    })
    
    local InfiniteJumpToggle = MainTab:CreateToggle({
        Name = "🦘 Infinite Jump",
        CurrentValue = states.infiniteJump,
        Flag = "InfiniteJumpToggle",
        Callback = function(Value)
            toggleInfiniteJump(Value)
        end,
    })
    
    if isMobile then
        local FloatToggle = MainTab:CreateToggle({
            Name = "🎈 Float (Mobile)",
            CurrentValue = states.float,
            Flag = "FloatToggle",
            Callback = function(Value)
                toggleFloat(Value)
            end,
        })
    end
    
    local SpeedBoostToggle = MainTab:CreateToggle({
        Name = "⚡ Speed Boost",
        CurrentValue = states.speedBoost,
        Flag = "SpeedBoostToggle",
        Callback = function(Value)
            toggleSpeedBoost(Value)
        end,
    })
    
    local NoclipToggle = MainTab:CreateToggle({
        Name = "👻 Noclip",
        CurrentValue = states.noclip,
        Flag = "NoclipToggle",
        Callback = function(Value)
            toggleNoclip(Value)
        end,
    })
    
    local FlyToggle = MainTab:CreateToggle({
        Name = "✈️ Fly",
        CurrentValue = states.fly,
        Flag = "FlyToggle",
        Callback = function(Value)
            toggleFly(Value)
        end,
    })
    
    -- Visual Tab
    local VisualTab = Window:CreateTab("👁️ Visual", 4483362458)
    
    local ESPBoxToggle = VisualTab:CreateToggle({
        Name = "📦 ESP Box",
        CurrentValue = states.espBox,
        Flag = "ESPBoxToggle",
        Callback = function(Value)
            toggleESP("espBox", Value)
        end,
    })
    
    local ESPLinesToggle = VisualTab:CreateToggle({
        Name = "📐 ESP Lines",
        CurrentValue = states.espLines,
        Flag = "ESPLinesToggle",
        Callback = function(Value)
            toggleESP("espLines", Value)
        end,
    })
    
    local ESPNamesToggle = VisualTab:CreateToggle({
        Name = "🏷️ ESP Names & Health",
        CurrentValue = states.espNames,
        Flag = "ESPNamesToggle",
        Callback = function(Value)
            toggleESP("espNames", Value)
        end,
    })
    
    -- Misc Tab
    local MiscTab = Window:CreateTab("🔧 Misc", 4483362458)
    
    local BaseSection = MiscTab:CreateSection("📍 Base System")
    
    local SetBaseButton = MiscTab:CreateButton({
        Name = "📍 Set Base",
        Callback = function()
            local rootPart = getRootPart()
            if rootPart then
                basePosition = rootPart.Position
                Rayfield:Notify({
                    Title = "Water Hub",
                    Content = "Base position set successfully!",
                    Duration = 2,
                    Image = 4483362458
                })
            end
        end,
    })
    
    local TeleportBaseButton = MiscTab:CreateButton({
        Name = "🚀 Teleport to Base",
        Callback = function()
            teleportToBase()
        end,
    })
    
    local ToolsSection = MiscTab:CreateSection("🔨 Tools")
    
    local GiveItemsButton = MiscTab:CreateButton({
        Name = "📦 Give All Items",
        Callback = function()
            local itemCount = giveAllItems()
            if itemCount > 0 then
                Rayfield:Notify({
                    Title = "Water Hub",
                    Content = "Collected " .. itemCount .. " items!",
                    Duration = 3,
                    Image = 4483362458
                })
            else
                Rayfield:Notify({
                    Title = "Water Hub",
                    Content = "No items found to collect!",
                    Duration = 3,
                    Image = 4483362458
                })
            end
        end,
    })
    
    local StealHelperSection = MiscTab:CreateSection("💰 Steal Helper")
    
    local stealIsAtTop = false
    local StealHelperButton = MiscTab:CreateButton({
        Name = "⬆️ Up to 165",
        Callback = function()
            local rootPart = getRootPart()
            if rootPart then
                if stealIsAtTop then
                    rootPart.CFrame = rootPart.CFrame - Vector3.new(0, 50, 0)
                    stealIsAtTop = false
                    -- Update button text would require recreating it in Rayfield
                else
                    rootPart.CFrame = CFrame.new(rootPart.Position.X, 165, rootPart.Position.Z)
                    stealIsAtTop = true
                    -- Update button text would require recreating it in Rayfield
                end
            end
        end,
    })
    
    -- Server Tab
    local ServerTab = Window:CreateTab("🌐 Server", 4483362458)
    
    local ServerSection = ServerTab:CreateSection("🔄 Server Controls")
    
    local RejoinButton = ServerTab:CreateButton({
        Name = "🔄 Rejoin Server",
        Callback = function()
            TeleportService:Teleport(game.PlaceId, player)
        end,
    })
    
    local LeaveButton = ServerTab:CreateButton({
        Name = "🚪 Leave Game",
        Callback = function()
            player:Kick("Left the game via Water Hub")
        end,
    })
    
    local ServerHopButton = ServerTab:CreateButton({
        Name = "🌐 Server Hop",
        Callback = function()
            local servers = {}
            local req = syn and syn.request or http_request or request
            
            if req then
                local success, result = pcall(function()
                    return req({
                        Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100",
                        Method = "GET"
                    })
                end)
                
                if success and result.Success then
                    local data = HttpService:JSONDecode(result.Body)
                    for _, server in pairs(data.data) do
                        if server.playing < server.maxPlayers and server.id ~= game.JobId then
                            table.insert(servers, server.id)
                        end
                    end
                    
                    if #servers > 0 then
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
                    else
                        Rayfield:Notify({
                            Title = "Water Hub",
                            Content = "No available servers found!",
                            Duration = 3,
                            Image = 4483362458
                        })
                    end
                end
            end
        end,
    })
    
    local InfoSection = ServerTab:CreateSection("📊 Server Information")
    
    local playerCountLabel = ServerTab:CreateLabel("Players: " .. #Players:GetPlayers() .. "/" .. Players.MaxPlayers)
    local serverIdLabel = ServerTab:CreateLabel("Server ID: " .. game.JobId:sub(1, 8) .. "...")
    local pingLabel = ServerTab:CreateLabel("Ping: Calculating...")
    
    -- Update server info periodically
    spawn(function()
        while true do
            wait(2)
            if playerCountLabel then
                playerCountLabel:Set("Players: " .. #Players:GetPlayers() .. "/" .. Players.MaxPlayers)
            end
            
            local ping = player:GetNetworkPing()
            if ping and pingLabel then
                pingLabel:Set("Ping: " .. math.floor(ping * 1000) .. "ms")
            end
        end
    end)
    
    -- Credits Tab
    local CreditsTab = Window:CreateTab("ℹ️ Credits", 4483362458)
    
    local AboutSection = CreditsTab:CreateSection("💧 About Water Hub")
    
    CreditsTab:CreateLabel("Water Hub - Ultimate Edition v5.2")
    CreditsTab:CreateLabel("Developed by Water Team")
    CreditsTab:CreateLabel("Using Rayfield UI Library")
    CreditsTab:CreateLabel("")
    CreditsTab:CreateLabel("Features:")
    CreditsTab:CreateLabel("• Advanced Anticheat Bypass")
    CreditsTab:CreateLabel("• God Mode Protection")
    CreditsTab:CreateLabel("• Movement Enhancements")
    CreditsTab:CreateLabel("• ESP System")
    CreditsTab:CreateLabel("• Base Teleportation")
    CreditsTab:CreateLabel("• Mobile Support")
    CreditsTab:CreateLabel("• And much more!")
    
    local BypassSection = CreditsTab:CreateSection("🔒 Bypass Status")
    
    CreditsTab:CreateLabel("✅ Metatable Protection Active")
    CreditsTab:CreateLabel("✅ Remote Filtering Active")
    CreditsTab:CreateLabel("✅ Anti-Kick Protection")
    CreditsTab:CreateLabel("✅ Anti-Idle Active")
    CreditsTab:CreateLabel("✅ Error Suppression Active")
    
    local MinimizeButton = CreditsTab:CreateButton({
        Name = "➖ Minimize to Icon",
        Callback = function()
            Rayfield:Destroy()
            createMinimizedIcon()
        end,
    })
    
    -- Show notification on load
    Rayfield:Notify({
        Title = "Water Hub",
        Content = "Successfully loaded! All features active.",
        Duration = 5,
        Image = 4483362458
    })
end

-- Character respawn handler with state restoration
local function onCharacterAdded(character)
    wait(0.5)
    
    Rayfield:Notify({
        Title = "Water Hub",
        Content = "Restoring features after respawn...",
        Duration = 2,
        Image = 4483362458
    })
    
    local restoredFeatures = {}
    
    if states.godMode then 
        toggleGodMode(true)
        table.insert(restoredFeatures, "God Mode")
    end
    
    if states.speedBoost then 
        toggleSpeedBoost(true)
        table.insert(restoredFeatures, "Speed Boost")
    end
    
    if states.infiniteJump then 
        toggleInfiniteJump(true)
        table.insert(restoredFeatures, "Infinite Jump")
    end
    
    if states.float then 
        toggleFloat(true)
        table.insert(restoredFeatures, "Float")
    end
    
    if states.noclip then 
        toggleNoclip(true)
        table.insert(restoredFeatures, "Noclip")
    end
    
    if states.fly then 
        toggleFly(true)
        table.insert(restoredFeatures, "Fly")
    end
    
    if #restoredFeatures > 0 then
        Rayfield:Notify({
            Title = "Water Hub",
            Content = "Restored: " .. table.concat(restoredFeatures, ", "),
            Duration = 3,
            Image = 4483362458
        })
    end
end

-- Cleanup function
local function cleanup()
    for name, connection in pairs(connections) do
        if connection then
            connection:Disconnect()
        end
    end
    connections = {}
    
    for player, objects in pairs(espObjects) do
        for _, obj in pairs(objects) do
            if obj then obj:Destroy() end
        end
    end
    espObjects = {}
    
    if floatBody then floatBody:Destroy() end
    if flyPart then flyPart:Destroy() end
    if minimizedIcon then minimizedIcon:Destroy() end
end

-- Player removing handler
Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == player then
        cleanup()
    end
end)

-- Setup character respawn handler
player.CharacterAdded:Connect(onCharacterAdded)

-- Initialize Water Hub
local success, err = pcall(function()
    setupBypass()
    
    -- Small delay to prevent initial lag
    wait(0.1)
    
    createWaterHubGUI()
    
    -- Enable god mode by default
    toggleGodMode(true)
end)

if not success then
    warn("Water Hub initialization error:", err)
    if StarterGui then
        StarterGui:SetCore("SendNotification", {
            Title = "Water Hub Error",
            Text = "Failed to initialize. Please try again.",
            Duration = 5
        })
    end
end
