-- Water Hub Script - Ultimate Professional Edition v5.0 (Optimized)
-- Fully optimized with enhanced bypass and bug fixes
-- Integrated with Rayfield UI Library

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")

-- Optimized references
local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local heartbeat = RunService.Heartbeat
local stepped = RunService.Stepped
local wait = task.wait

-- Mobile detection
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- States with optimized access
local states = {
    godMode = true,
    infiniteJump = false,
    speedBoost = false,
    noclip = false,
    fly = false,
    espBox = false,
    espLines = false,
    espNames = false,
    stealHelper = false
}

-- Optimized variables
local flyPart = nil
local basePosition = nil
local originalWalkSpeed = 16
local originalJumpPower = 50
local espObjects = {}
local espUpdateConnection = nil
local lastUpdate = 0
local updateInterval = 0.5

-- Cache frequently used functions
local getCharacter = function()
    return player.Character or player.CharacterAdded:Wait()
end

local getHumanoid = function()
    local char = getCharacter()
    return char and char:FindFirstChildOfClass("Humanoid")
end

local getRootPart = function()
    local char = getCharacter()
    return char and (char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart", 1))
end

-- Optimized bypass setup
local function setupBypass()
    if not getrawmetatable then return end
    
    local mt = getrawmetatable(game)
    if setreadonly then setreadonly(mt, false) end
    
    local namecall = mt.__namecall
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        -- Block kick/ban attempts
        if method == "Kick" or method == "kick" then
            return nil
        end
        
        -- Block suspicious remote events
        if (method == "FireServer" or method == "InvokeServer") and (self:IsA("RemoteEvent") or self:IsA("RemoteFunction")) then
            local name = self.Name:lower()
            if name:find("anti") or name:find("cheat") or name:find("ban") or name:find("kick") then
                return nil
            end
        end
        
        return namecall(self, ...)
    end)
    
    -- Anti-idle optimization
    player.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end

-- Optimized feature functions
local function toggleGodMode(enabled)
    states.godMode = enabled
    if not enabled then return end
    
    heartbeat:Connect(function()
        local humanoid = getHumanoid()
        if humanoid then
            humanoid.Health = humanoid.MaxHealth
            pcall(function()
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
            end)
        end
    end)
end

local function toggleInfiniteJump(enabled)
    states.infiniteJump = enabled
    if not enabled then return end
    
    UserInputService.JumpRequest:Connect(function()
        local humanoid = getHumanoid()
        if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)
end

local function toggleSpeedBoost(enabled)
    states.speedBoost = enabled
    local humanoid = getHumanoid()
    
    if enabled and humanoid then
        originalWalkSpeed = humanoid.WalkSpeed
        humanoid.WalkSpeed = 25
    elseif humanoid then
        humanoid.WalkSpeed = originalWalkSpeed
    end
end

local function toggleNoclip(enabled)
    states.noclip = enabled
    if not enabled then return end
    
    stepped:Connect(function()
        for _, part in ipairs(getCharacter():GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end)
end

local function toggleFly(enabled)
    states.fly = enabled
    if not enabled then
        if flyPart then flyPart:Destroy() end
        return 
    end
    
    -- Create fly part once
    flyPart = flyPart or Instance.new("Part")
    flyPart.Size = Vector3.new(5, 0.2, 5)
    flyPart.Transparency = 1
    flyPart.CanCollide = true
    flyPart.Anchored = true
    flyPart.Parent = Workspace
    
    heartbeat:Connect(function()
        local rootPart = getRootPart()
        if not rootPart then return end
        
        -- Position platform under player
        flyPart.CFrame = CFrame.new(rootPart.Position - Vector33.new(0, 3.5, 0))
        
        -- Movement vectors
        local moveVector = Vector3.new()
        local camCF = camera.CFrame
        
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveVector += camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveVector -= camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveVector -= camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveVector += camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveVector += Vector3.new(0, 1, 0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then moveVector -= Vector3.new(0, 1, 0) end
        
        -- Apply movement
        rootPart.Velocity = moveVector.Unit * 50
    end)
end

-- Optimized ESP system
local function updateESP()
    if os.clock() - lastUpdate < updateInterval then return end
    lastUpdate = os.clock()
    
    for targetPlayer, objects in pairs(espObjects) do
        if not targetPlayer:IsDescendantOf(Players) then
            for _, obj in ipairs(objects) do obj:Destroy() end
            espObjects[targetPlayer] = nil
        end
    end
    
    for _, targetPlayer in ipairs(Players:GetPlayers()) do
        if targetPlayer == player then continue end
        
        local character = targetPlayer.Character
        if not character then continue end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then continue end
        
        if not espObjects[targetPlayer] then
            espObjects[targetPlayer] = {}
            
            if states.espBox then
                local box = Instance.new("BoxHandleAdornment")
                box.Size = character:GetExtentsSize()
                box.Color3 = Color3.fromRGB(255, 100, 100)
                box.Transparency = 0.3
                box.Adornee = rootPart
                box.Parent = rootPart
                table.insert(espObjects[targetPlayer], box)
            end
            
            if states.espNames then
                local billboard = Instance.new("BillboardGui")
                billboard.Adornee = rootPart
                billboard.Size = UDim2.new(0, 200, 0, 40)
                billboard.StudsOffset = Vector3.new(0, 3, 0)
                billboard.Parent = rootPart
                
                local nameLabel = Instance.new("TextLabel")
                nameLabel.Size = UDim2.new(1, 0, 1, 0)
                nameLabel.Text = targetPlayer.Name
                nameLabel.TextColor3 = Color3.new(1, 1, 1)
                nameLabel.BackgroundTransparency = 1
                nameLabel.Parent = billboard
                
                table.insert(espObjects[targetPlayer], billboard)
            end
        end
    end
end

local function toggleESP(espType, enabled)
    states[espType] = enabled
    
    -- Clear existing ESP
    for _, objects in pairs(espObjects) do
        for _, obj in ipairs(objects) do obj:Destroy() end
    end
    table.clear(espObjects)
    
    if espUpdateConnection then
        espUpdateConnection:Disconnect()
        espUpdateConnection = nil
    end
    
    if enabled then
        espUpdateConnection = heartbeat:Connect(updateESP)
    end
end

-- Optimized teleport to base
local function teleportToBase()
    if not basePosition then return false end
    
    local rootPart = getRootPart()
    if not rootPart then return false end
    
    -- Phase 1: Move to height
    rootPart.CFrame = CFrame.new(rootPart.Position.X, 165, rootPart.Position.Z)
    wait(1)
    
    -- Phase 2: Move to base
    local target = Vector3.new(basePosition.X, 165, basePosition.Z)
    rootPart.CFrame = CFrame.new(target)
    wait(1)
    
    -- Phase 3: Move down
    rootPart.CFrame = CFrame.new(basePosition)
    return true
end

-- Optimized item collection
local function giveAllItems()
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return 0 end
    
    local rootPart = getRootPart()
    if not rootPart then return 0 end
    
    local collected = 0
    
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("Tool") and obj.Parent ~= backpack then
            obj.Parent = backpack
            collected += 1
        elseif obj:IsA("BasePart") and obj.Name:lower():find("item") then
            obj.CFrame = rootPart.CFrame
            collected += 1
        end
    end
    
    return collected
end

-- Rayfield UI Creation
local function createRayfieldUI()
    local Window = Rayfield:CreateWindow({
        Name = "💧 Water Hub v5 - Optimized",
        LoadingTitle = "Optimized Performance Mode",
        ConfigurationSaving = { Enabled = false }
    })

    -- Main Features Tab
    local MainTab = Window:CreateTab("Main Features", 6023426915)
    
    local toggles = {
        {name = "🛡️ God Mode", state = "godMode", func = toggleGodMode},
        {name = "🦘 Infinite Jump", state = "infiniteJump", func = toggleInfiniteJump},
        {name = "⚡ Speed Boost", state = "speedBoost", func = toggleSpeedBoost},
        {name = "👻 Noclip", state = "noclip", func = toggleNoclip},
        {name = "✈️ Fly", state = "fly", func = toggleFly}
    }
    
    for _, toggle in ipairs(toggles) do
        MainTab:CreateToggle({
            Name = toggle.name,
            CurrentValue = states[toggle.state],
            Callback = function(value)
                states[toggle.state] = value
                toggle.func(value)
            end
        })
    end
    
    -- Base System
    MainTab:CreateSection("Base System")
    MainTab:CreateButton({Name = "📍 Set Base Position", Callback = function()
        local rootPart = getRootPart()
        if rootPart then
            basePosition = rootPart.Position
            Rayfield:Notify({Title = "Base Set", Content = "Position saved!", Duration = 2})
        end
    end})
    
    MainTab:CreateButton({Name = "🚀 Teleport to Base", Callback = teleportToBase})
    
    -- ESP Tab
    local VisualTab = Window:CreateTab("Visual Features", 6023426915)
    
    local espToggles = {
        {name = "📦 ESP Box", state = "espBox"},
        {name = "🏷️ ESP Names", state = "espNames"}
    }
    
    for _, toggle in ipairs(espToggles) do
        VisualTab:CreateToggle({
            Name = toggle.name,
            CurrentValue = states[toggle.state],
            Callback = function(value)
                states[toggle.state] = value
                toggleESP(toggle.state, value)
            end
        })
    end
    
    -- Server Tab
    local ServerTab = Window:CreateTab("Server", 6023426915)
    
    ServerTab:CreateButton({Name = "🔄 Rejoin Server", Callback = function()
        TeleportService:Teleport(game.PlaceId, player)
    end})
    
    ServerTab:CreateButton({Name = "🌐 Server Hop", Callback = function()
        local servers = {}
        local req = request or http_request or syn.request
        
        if req then
            local response = req({Url = "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?limit=50"})
            if response.Success then
                local data = HttpService:JSONDecode(response.Body)
                for _, server in ipairs(data.data) do
                    if server.playing < server.maxPlayers and server.id ~= game.JobId then
                        table.insert(servers, server.id)
                    end
                end
                
                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(#servers)])
                end
            end
        end
    end})
    
    -- Misc Tab
    local MiscTab = Window:CreateTab("Utilities", 6023426915)
    MiscTab:CreateButton({Name = "📦 Collect All Items", Callback = function()
        local count = giveAllItems()
        Rayfield:Notify({Title = "Items Collected", Content = "Found "..count.." items", Duration = 3})
    end})
end

-- Initialize
setupBypass()
createRayfieldUI()

-- Initial activation
toggleGodMode(true)
Rayfield:Notify({
    Title = "Water Hub Activated",
    Content = "Optimized Performance Mode Enabled",
    Duration = 4
})
