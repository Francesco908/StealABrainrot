-- Water Hub Mobile Optimized v2.0
-- Sistema di sfide e ricompense per il tuo gioco

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local DataStoreService = game:GetService("DataStoreService")

-- Configurazione sfide
local CHALLENGES = {
    {id = "jump_master", name = "Jump Master", requirement = 100, reward = "infinite_jump"},
    {id = "speed_demon", name = "Speed Demon", requirement = 500, reward = "speed_boost"},
    {id = "explorer", name = "Explorer", requirement = 50, reward = "teleport"},
    {id = "survivor", name = "Survivor", requirement = 300, reward = "float"},
    {id = "observer", name = "Observer", requirement = 150, reward = "esp_player"}
}

-- Sistema di salvataggio progresso
local playerDataStore = DataStoreService:GetDataStore("WaterHubProgress")
local playerProgress = {}

-- Utility per creare elementi UI
local function createElement(class, props)
    local element = Instance.new(class)
    for prop, value in pairs(props) do
        element[prop] = value
    end
    return element
end

-- Creazione animazioni fluide
local function tweenElement(element, props, duration)
    local tween = TweenService:Create(
        element,
        TweenInfo.new(duration or 0.3, Enum.EasingStyle.Quad),
        props
    )
    tween:Play()
    return tween
end

-- GUI principale
local ScreenGui = createElement("ScreenGui", {
    Name = "WaterHubMobile",
    ResetOnSpawn = false,
    Parent = game:GetService("CoreGui")
})

-- Rilevamento dispositivo mobile
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled

-- Container principale con dimensioni adattive
local screenSize = workspace.CurrentCamera.ViewportSize
local MainFrame = createElement("Frame", {
    Name = "MainContainer",
    Parent = ScreenGui,
    Size = isMobile and UDim2.new(0.9, 0, 0.8, 0) or UDim2.new(0, 450, 0, 400),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = Color3.fromRGB(25, 25, 35),
    BackgroundTransparency = 0.05
})

createElement("UICorner", {
    Parent = MainFrame,
    CornerRadius = UDim.new(0, 16)
})

createElement("UIStroke", {
    Parent = MainFrame,
    Color = Color3.fromRGB(100, 150, 255),
    Thickness = 2,
    Transparency = 0.5
})

-- Header migliorato
local Header = createElement("Frame", {
    Name = "Header",
    Parent = MainFrame,
    Size = UDim2.new(1, 0, 0, 50),
    BackgroundColor3 = Color3.fromRGB(20, 20, 30)
})

createElement("UICorner", {
    Parent = Header,
    CornerRadius = UDim.new(0, 16)
})

-- Titolo con animazione
local Title = createElement("TextLabel", {
    Parent = Header,
    Size = UDim2.new(0.7, 0, 1, 0),
    Position = UDim2.new(0, 20, 0, 0),
    BackgroundTransparency = 1,
    Text = "üíß Water Hub",
    Font = Enum.Font.GothamBold,
    TextScaled = true,
    TextColor3 = Color3.fromRGB(255, 255, 255)
})

-- Sistema di trascinamento ottimizzato per mobile
local function setupDragging(frame, handle)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    local function update(input)
        if dragging then
            local delta = input.Position - dragStart
            tweenElement(frame, {
                Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            }, 0.1)
        end
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or
           input.UserInputType == Enum.UserInputType.Touch then
            update(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
end

setupDragging(MainFrame, Header)

-- Pulsanti header ottimizzati
local MinimizeBtn = createElement("TextButton", {
    Parent = Header,
    Size = UDim2.new(0, 40, 0, 40),
    Position = UDim2.new(1, -90, 0.5, 0),
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundTransparency = 1,
    Text = "‚ûñ",
    Font = Enum.Font.GothamBold,
    TextScaled = true,
    TextColor3 = Color3.fromRGB(255, 255, 255)
})

local CloseBtn = createElement("TextButton", {
    Parent = Header,
    Size = UDim2.new(0, 40, 0, 40),
    Position = UDim2.new(1, -45, 0.5, 0),
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundTransparency = 1,
    Text = "‚ùå",
    Font = Enum.Font.GothamBold,
    TextScaled = true,
    TextColor3 = Color3.fromRGB(255, 100, 100)
})

-- Icona minimizzata per mobile
local MinimizedIcon = createElement("ImageButton", {
    Parent = ScreenGui,
    Size = UDim2.new(0, 60, 0, 60),
    Position = UDim2.new(0, 20, 0.5, 0),
    AnchorPoint = Vector2.new(0, 0.5),
    BackgroundColor3 = Color3.fromRGB(25, 25, 35),
    Image = "rbxassetid://7072718307",
    Visible = false
})

createElement("UICorner", {
    Parent = MinimizedIcon,
    CornerRadius = UDim.new(0.5, 0)
})

-- Logica minimizzazione
MinimizeBtn.MouseButton1Click:Connect(function()
    tweenElement(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3).Completed:Wait()
    MainFrame.Visible = false
    MinimizedIcon.Visible = true
    tweenElement(MinimizedIcon, {Size = UDim2.new(0, 60, 0, 60)}, 0.3)
end)

MinimizedIcon.MouseButton1Click:Connect(function()
    MainFrame.Visible = true
    MinimizedIcon.Visible = false
    local targetSize = isMobile and UDim2.new(0.9, 0, 0.8, 0) or UDim2.new(0, 450, 0, 400)
    tweenElement(MainFrame, {Size = targetSize}, 0.3)
end)

CloseBtn.MouseButton1Click:Connect(function()
    tweenElement(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3).Completed:Wait()
    ScreenGui:Destroy()
end)

-- Sistema di tab migliorato
local TabContainer = createElement("Frame", {
    Parent = MainFrame,
    Size = UDim2.new(1, -20, 0, 40),
    Position = UDim2.new(0, 10, 0, 60),
    BackgroundTransparency = 1
})

local tabs = {"Abilit√†", "Sfide", "Profilo", "Negozio"}
local contentFrames = {}
local tabButtons = {}

for i, tabName in ipairs(tabs) do
    -- Pulsante tab
    local tabBtn = createElement("TextButton", {
        Parent = TabContainer,
        Size = UDim2.new(1/#tabs, -5, 1, 0),
        Position = UDim2.new((i-1)/#tabs, 5, 0, 0),
        BackgroundColor3 = Color3.fromRGB(40, 40, 50),
        Text = tabName,
        Font = Enum.Font.Gotham,
        TextScaled = true,
        TextColor3 = Color3.fromRGB(200, 200, 200)
    })
    
    createElement("UICorner", {
        Parent = tabBtn,
        CornerRadius = UDim.new(0, 10)
    })
    
    tabButtons[tabName] = tabBtn
    
    -- Frame contenuto
    local content = createElement("ScrollingFrame", {
        Parent = MainFrame,
        Size = UDim2.new(1, -20, 1, -120),
        Position = UDim2.new(0, 10, 0, 110),
        BackgroundTransparency = 1,
        ScrollBarThickness = 6,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Visible = i == 1
    })
    
    contentFrames[tabName] = content
    
    -- Logica selezione tab
    tabBtn.MouseButton1Click:Connect(function()
        for name, frame in pairs(contentFrames) do
            frame.Visible = false
            tabButtons[name].BackgroundColor3 = Color3.fromRGB(40, 40, 50)
            tabButtons[name].TextColor3 = Color3.fromRGB(200, 200, 200)
        end
        
        content.Visible = true
        tweenElement(tabBtn, {
            BackgroundColor3 = Color3.fromRGB(100, 150, 255),
            TextColor3 = Color3.fromRGB(255, 255, 255)
        })
    end)
end

-- Seleziona primo tab
tabButtons["Abilit√†"].BackgroundColor3 = Color3.fromRGB(100, 150, 255)
tabButtons["Abilit√†"].TextColor3 = Color3.fromRGB(255, 255, 255)

-- Sistema di abilit√† sbloccabili
local function createAbilityCard(parent, name, icon, description, unlocked, callback)
    local card = createElement("Frame", {
        Parent = parent,
        Size = UDim2.new(1, -10, 0, 100),
        BackgroundColor3 = unlocked and Color3.fromRGB(40, 45, 55) or Color3.fromRGB(30, 30, 35)
    })
    
    createElement("UICorner", {
        Parent = card,
        CornerRadius = UDim.new(0, 12)
    })
    
    createElement("UIStroke", {
        Parent = card,
        Color = unlocked and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(80, 80, 80),
        Thickness = 2
    })
    
    -- Icona
    createElement("TextLabel", {
        Parent = card,
        Size = UDim2.new(0, 60, 0, 60),
        Position = UDim2.new(0, 15, 0.5, 0),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundTransparency = 1,
        Text = icon,
        Font = Enum.Font.GothamBold,
        TextScaled = true
    })
    
    -- Nome e descrizione
    createElement("TextLabel", {
        Parent = card,
        Size = UDim2.new(0.5, -90, 0, 30),
        Position = UDim2.new(0, 85, 0, 15),
        BackgroundTransparency = 1,
        Text = name,
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    createElement("TextLabel", {
        Parent = card,
        Size = UDim2.new(0.5, -90, 0, 40),
        Position = UDim2.new(0, 85, 0, 45),
        BackgroundTransparency = 1,
        Text = description,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        TextColor3 = Color3.fromRGB(180, 180, 180),
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    
    -- Pulsante attiva/disattiva
    local toggleBtn = createElement("TextButton", {
        Parent = card,
        Size = UDim2.new(0, 100, 0, 40),
        Position = UDim2.new(1, -110, 0.5, 0),
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = unlocked and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(100, 40, 40),
        Text = unlocked and "ATTIVA" or "BLOCCATO",
        Font = Enum.Font.GothamBold,
        TextScaled = true,
        TextColor3 = Color3.fromRGB(255, 255, 255)
    })
    
    createElement("UICorner", {
        Parent = toggleBtn,
        CornerRadius = UDim.new(0, 8)
    })
    
    if unlocked then
        local active = false
        toggleBtn.MouseButton1Click:Connect(function()
            active = not active
            toggleBtn.Text = active and "DISATTIVA" or "ATTIVA"
            toggleBtn.BackgroundColor3 = active and Color3.fromRGB(150, 50, 50) or Color3.fromRGB(50, 150, 50)
            callback(active)
        end)
    end
    
    return card
end

-- Layout per abilit√†
local abilityLayout = createElement("UIListLayout", {
    Parent = contentFrames["Abilit√†"],
    Padding = UDim.new(0, 10),
    SortOrder = Enum.SortOrder.LayoutOrder
})

-- Aggiungi padding
createElement("UIPadding", {
    Parent = contentFrames["Abilit√†"],
    PaddingTop = UDim.new(0, 10),
    PaddingBottom = UDim.new(0, 10),
    PaddingLeft = UDim.new(0, 5),
    PaddingRight = UDim.new(0, 5)
})

-- Abilit√† esempio
local abilities = {
    {
        name = "Super Salto",
        icon = "ü¶ò",
        description = "Salta infinitamente alto",
        unlocked = true,
        callback = function(active)
            -- Logica super salto
            if active then
                LocalPlayer.Character.Humanoid.JumpPower = 100
            else
                LocalPlayer.Character.Humanoid.JumpPower = 50
            end
        end
    },
    {
        name = "Super Velocit√†",
        icon = "üöÄ",
        description = "Corri come il vento",
        unlocked = false,
        callback = function(active)
            if active then
                LocalPlayer.Character.Humanoid.WalkSpeed = 32
            else
                LocalPlayer.Character.Humanoid.WalkSpeed = 16
            end
        end
    },
    {
        name = "Volo",
        icon = "ü™Å",
        description = "Fluttua nell'aria",
        unlocked = false,
        callback = function(active)
            -- Logica volo
        end
    }
}

-- Crea carte abilit√†
for i, ability in ipairs(abilities) do
    local card = createAbilityCard(
        contentFrames["Abilit√†"],
        ability.name,
        ability.icon,
        ability.description,
        ability.unlocked,
        ability.callback
    )
    card.LayoutOrder = i
end

-- Aggiorna dimensione canvas
contentFrames["Abilit√†"].CanvasSize = UDim2.new(0, 0, 0, abilityLayout.AbsoluteContentSize.Y + 20)

-- Sistema sfide
local challengeLayout = createElement("UIListLayout", {
    Parent = contentFrames["Sfide"],
    Padding = UDim.new(0, 10),
    SortOrder = Enum.SortOrder.LayoutOrder
})

createElement("UIPadding", {
    Parent = contentFrames["Sfide"],
    PaddingTop = UDim.new(0, 10),
    PaddingBottom = UDim.new(0, 10),
    PaddingLeft = UDim.new(0, 5),
    PaddingRight = UDim.new(0, 5)
})

-- Funzione per creare carta sfida
local function createChallengeCard(parent, challenge, progress)
    local card = createElement("Frame", {
        Parent = parent,
        Size = UDim2.new(1, -10, 0, 120),
        BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    })
    
    createElement("UICorner", {
        Parent = card,
        CornerRadius = UDim.new(0, 12)
    })
    
    -- Nome sfida
    createElement("TextLabel", {
        Parent = card,
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        Text = challenge.name,
        Font = Enum.Font.GothamBold,
        TextSize = 20,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Barra progresso
    local progressBar = createElement("Frame", {
        Parent = card,
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 50),
        BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    })
    
    createElement("UICorner", {
        Parent = progressBar,
        CornerRadius = UDim.new(0, 10)
    })
    
    local progressFill = createElement("Frame", {
        Parent = progressBar,
        Size = UDim2.new(math.min(progress / challenge.requirement, 1), 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(100, 255, 100)
    })
    
    createElement("UICorner", {
        Parent = progressFill,
        CornerRadius = UDim.new(0, 10)
    })
    
    -- Testo progresso
    createElement("TextLabel", {
        Parent = card,
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 80),
        BackgroundTransparency = 1,
        Text = string.format("%d / %d", progress, challenge.requirement),
        Font = Enum.Font.Gotham,
        TextSize = 16,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextXAlignment = Enum.TextXAlignment.Center
    })
    
    return card
end

-- Crea carte sfide
for i, challenge in ipairs(CHALLENGES) do
    local progress = playerProgress[challenge.id] or 0
    local card = createChallengeCard(contentFrames["Sfide"], challenge, progress)
    card.LayoutOrder = i
end

contentFrames["Sfide"].CanvasSize = UDim2.new(0, 0, 0, challengeLayout.AbsoluteContentSize.Y + 20)

-- Notifiche ottimizzate
local function showNotification(text, duration)
    local notif = createElement("Frame", {
        Parent = ScreenGui,
        Size = UDim2.new(0, 300, 0, 60),
        Position = UDim2.new(0.5, 0, 0, -70),
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    })
    
    createElement("UICorner", {
        Parent = notif,
        CornerRadius = UDim.new(0, 12)
    })
    
    createElement("TextLabel", {
        Parent = notif,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = text,
        Font = Enum.Font.GothamBold,
        TextScaled = true,
        TextColor3 = Color3.fromRGB(255, 255, 255)
    })
    
    tweenElement(notif, {Position = UDim2.new(0.5, 0, 0, 20)}, 0.5)
    
    task.wait(duration or 3)
    
    tweenElement(notif, {Position = UDim2.new(0.5, 0, 0, -70)}, 0.5).Completed:Wait()
    notif:Destroy()
end

-- Sistema di salvataggio automatico
spawn(function()
    while true do
        task.wait(30)
        pcall(function()
            playerDataStore:SetAsync(LocalPlayer.UserId, playerProgress)
        end)
    end
end)

-- Carica dati giocatore all'avvio
spawn(function()
    local success, data = pcall(function()
        return playerDataStore:GetAsync(LocalPlayer.UserId)
    end)
    
    if success and data then
        playerProgress = data
        showNotification("‚úÖ Progresso caricato!", 2)
    end
end)
