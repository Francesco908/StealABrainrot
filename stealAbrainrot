-- Universal Roblox Script - Compatible with all games
-- Multiple fallback methods for maximum compatibility

-- Method 1: Primary Rayfield load
local Rayfield
local success1 = pcall(function()
    Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)

-- Method 2: Backup Rayfield load
if not success1 then
    pcall(function()
        Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
    end)
end

-- Method 3: Final backup
if not Rayfield then
    pcall(function()
        Rayfield = loadstring(game:HttpGet('https://github.com/shlexware/Rayfield/releases/latest/download/source.lua'))()
    end)
end

-- If still no Rayfield, create basic notification system
if not Rayfield then
    warn("Rayfield failed to load - using basic mode")
    return
end

-- Wait for game (with timeout)
local timeout = 0
repeat 
    wait(0.1)
    timeout = timeout + 0.1
until game:IsLoaded() or timeout > 10

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Wait for LocalPlayer
timeout = 0
repeat 
    wait(0.1)
    timeout = timeout + 0.1
until LocalPlayer or timeout > 5

-- Variables
local basePosition = Vector3.new(0, 10, 0)
local originalSpeed = 16
local isTweening = false
local isNoClipping = false

-- Anti-cheat bypass functions
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local Heartbeat = game:GetService("RunService").Heartbeat

-- Advanced anti-kick system
local function antiKick()
    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        if method == "Kick" then
            return
        end
        return old(self, ...)
    end)
    setreadonly(mt, true)
end

-- Network ownership bypass
local function bypassNetworkOwnership(part)
    if part and part.Parent then
        part.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    end
end

-- Advanced teleport with position spoofing
local function advancedTeleport(targetPosition)
    if isTweening then return end
    isTweening = true
    
    local char = LocalPlayer.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then 
        isTweening = false
        return 
    end
    
    local hrp = char.HumanoidRootPart
    local humanoid = char.Humanoid
    local startPos = hrp.Position
    
    -- Disable collision during teleport
    local originalCanCollide = {}
    for _, part in pairs(char:GetChildren()) do
        if part:IsA("BasePart") then
            originalCanCollide[part] = part.CanCollide
            part.CanCollide = false
        end
    end
    
    -- Create smooth path with multiple waypoints
    local distance = (startPos - targetPosition).Magnitude
    local waypoints = math.ceil(distance / 50) -- Waypoint every 50 studs
    local currentWaypoint = 1
    
    local function moveToNextWaypoint()
        if currentWaypoint > waypoints then
            -- Restore collision
            for part, canCollide in pairs(originalCanCollide) do
                if part.Parent then
                    part.CanCollide = canCollide
                end
            end
            isTweening = false
            return
        end
        
        local progress = currentWaypoint / waypoints
        local waypoint = startPos:lerp(targetPosition, progress)
        
        -- Add small random offset to simulate natural movement
        waypoint = waypoint + Vector3.new(
            math.random(-2, 2),
            math.random(-1, 1),
            math.random(-2, 2)
        )
        
        local tweenInfo = TweenInfo.new(
            0.3, -- Short segments
            Enum.EasingStyle.Linear,
            Enum.EasingDirection.InOut
        )
        
        local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(waypoint)})
        
        -- Bypass network ownership during tween
        local connection
        connection = Heartbeat:Connect(function()
            bypassNetworkOwnership(hrp)
        end)
        
        tween:Play()
        tween.Completed:Connect(function()
            connection:Disconnect()
            currentWaypoint = currentWaypoint + 1
            wait(0.05) -- Small delay between waypoints
            moveToNextWaypoint()
        end)
    end
    
    -- Start the waypoint sequence
    moveToNextWaypoint()
end

-- Initialize anti-kick
pcall(antiKick)

-- Auto-set base when character loads
local function updateBase()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        basePosition = char.HumanoidRootPart.Position
    end
end

-- Character detection with multiple methods
local function waitForCharacter()
    repeat wait(0.1) until LocalPlayer.Character
    repeat wait(0.1) until LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    updateBase()
end

-- Initial setup
if LocalPlayer.Character then
    waitForCharacter()
end

LocalPlayer.CharacterAdded:Connect(waitForCharacter)

-- Create UI with error handling
local Window, Tab

pcall(function()
    Window = Rayfield:CreateWindow({
        Name = "Universal Hub",
        LoadingTitle = "Loading Hub...",
        LoadingSubtitle = "Compatible with all games",
        ConfigurationSaving = {
            Enabled = false
        },
        Discord = {
            Enabled = false
        },
        KeySystem = false
    })
    
    Tab = Window:CreateTab("Main", 4483362458)
end)

if not Window or not Tab then
    warn("Failed to create UI")
    return
end

-- Speed Section
Tab:CreateSection("Speed Control")

Tab:CreateButton({
    Name = "Speed Boost +45%",
    Callback = function()
        pcall(function()
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("Humanoid") then
                char.Humanoid.WalkSpeed = originalSpeed * 1.45
                Rayfield:Notify({
                    Title = "Speed Boost",
                    Content = "Speed increased by 45%",
                    Duration = 2,
                    Image = 4483362458
                })
            end
        end)
    end
})

Tab:CreateButton({
    Name = "Reset Speed",
    Callback = function()
        pcall(function()
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("Humanoid") then
                char.Humanoid.WalkSpeed = originalSpeed
                Rayfield:Notify({
                    Title = "Speed Reset",
                    Content = "Speed reset to normal",
                    Duration = 2,
                    Image = 4483362458
                })
            end
        end)
    end
})

-- Teleport Section
Tab:CreateSection("Base Teleport")

Tab:CreateInput({
    Name = "Set Base Position (X,Y,Z)",
    PlaceholderText = "0,10,0",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        pcall(function()
            local coords = string.split(text, ",")
            if #coords == 3 then
                local x, y, z = tonumber(coords[1]), tonumber(coords[2]), tonumber(coords[3])
                if x and y and z then
                    basePosition = Vector3.new(x, y, z)
                    Rayfield:Notify({
                        Title = "Base Set",
                        Content = "Base position updated",
                        Duration = 2,
                        Image = 4483362458
                    })
                end
            end
        end)
    end
})

Tab:CreateButton({
    Name = "Advanced Safe Teleport",
    Callback = function()
        pcall(function()
            advancedTeleport(basePosition)
            Rayfield:Notify({
                Title = "Advanced Teleport",
                Content = "Moving naturally to base...",
                Duration = 2,
                Image = 4483362458
            })
        end)
    end
})

Tab:CreateButton({
    Name = "Update Base (Current Position)",
    Callback = function()
        pcall(function()
            updateBase()
            Rayfield:Notify({
                Title = "Base Updated",
                Content = "Base set to current position",
                Duration = 2,
                Image = 4483362458
            })
        end)
    end
})

-- Anti-detection measures
Tab:CreateSection("Anti-Detection & Bypass")

Tab:CreateButton({
    Name = "Enable Anti-Kick Protection",
    Callback = function()
        pcall(function()
            antiKick()
            Rayfield:Notify({
                Title = "Anti-Kick Active",
                Content = "Kick protection enabled",
                Duration = 2,
                Image = 4483362458
            })
        end)
    end
})

Tab:CreateButton({
    Name = "Humanize Movement",
    Callback = function()
        pcall(function()
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("Humanoid") then
                -- Add slight random variations to movement
                local humanoid = char.Humanoid
                local originalJumpPower = humanoid.JumpPower
                
                spawn(function()
                    while char.Parent do
                        wait(math.random(1, 3))
                        if math.random(1, 10) == 1 then
                            humanoid.JumpPower = originalJumpPower + math.random(-5, 5)
                            wait(0.1)
                            humanoid.JumpPower = originalJumpPower
                        end
                    end
                end)
            end
            Rayfield:Notify({
                Title = "Movement Humanized",
                Content = "Natural movement patterns active",
                Duration = 2,
                Image = 4483362458
            })
        end)
    end
})

Tab:CreateButton({
    Name = "Low Profile Mode",
    Callback = function()
        pcall(function()
            -- Reduce detection risk
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("Humanoid") then
                char.Humanoid.WalkSpeed = math.min(char.Humanoid.WalkSpeed, 20)
            end
            Rayfield:Notify({
                Title = "Low Profile",
                Content = "Detection risk reduced",
                Duration = 2,
                Image = 4483362458
            })
        end)
    end
})

-- Success notification
pcall(function()
    Rayfield:Notify({
        Title = "Hub Loaded",
        Content = "Universal Hub ready!",
        Duration = 3,
        Image = 4483362458
    })
end)
