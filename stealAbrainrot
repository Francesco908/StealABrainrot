-- Rayfield Interface Script
-- Fixed and Improved Version

-- Load Rayfield safely with error handling
local RayfieldSuccess, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
end)

if not RayfieldSuccess or not Rayfield then
    warn("Failed to load Rayfield! Trying backup source...")
    local backupSuccess, backupRayfield = pcall(function()
        return loadstring(game:HttpGet('https://raw.githubusercontent.com/slimeydev/backups/main/RayfieldBackup.lua'))()
    end)
    
    if backupSuccess then
        Rayfield = backupRayfield
    else
        error("Failed to load Rayfield from both sources!")
        return
    end
end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")

-- Variables
local LocalPlayer = Players.LocalPlayer
local connections = {}

-- Utility Functions
local function safeGetCharacter()
    return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
end

local function safeGetHumanoid()
    local character = safeGetCharacter()
    return character:FindFirstChild("Humanoid")
end

local function safeGetRootPart()
    local character = safeGetCharacter()
    return character:FindFirstChild("HumanoidRootPart")
end

local function notify(title, content, duration)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = duration or 3,
        Image = 4483362458,
    })
end

local function cleanupConnection(name)
    if connections[name] then
        connections[name]:Disconnect()
        connections[name] = nil
    end
end

-- Create the main window
local Window = Rayfield:CreateWindow({
    Name = "⚡ Enhanced Script Hub",
    LoadingTitle = "Loading Interface...",
    LoadingSubtitle = "by OnlyRobloxScript",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "EnhancedScriptHub",
        FileName = "Configuration"
    },
    KeySystem = false,
})

-- Create tabs
local MainTab = Window:CreateTab("🏠 Main", 4483362458)
local CombatTab = Window:CreateTab("⚔️ Combat", 4483362458)
local HelperTab = Window:CreateTab("🛠️ Helper", 4483362458)
local ESPTab = Window:CreateTab("👁️ ESP", 4483362458)
local SettingsTab = Window:CreateTab("⚙️ Settings", 4483362458)

-- Main Tab Features
local TeleportSection = MainTab:CreateSection("Teleport")

local GoSkyButton = MainTab:CreateButton({
    Name = "🚀 Go Sky",
    Callback = function()
        local rootPart = safeGetRootPart()
        if rootPart then
            rootPart.CFrame = CFrame.new(rootPart.Position.X, 256, rootPart.Position.Z)
            notify("Teleport Success", "You've been teleported to the sky!")
        else
            notify("Error", "Character not found!")
        end
    end,
})

local DownButton = MainTab:CreateButton({
    Name = "⬇️ Down",
    Callback = function()
        local rootPart = safeGetRootPart()
        if rootPart then
            rootPart.CFrame = CFrame.new(rootPart.Position.X, -50, rootPart.Position.Z)
            notify("Teleport Success", "You've been teleported down!")
        else
            notify("Error", "Character not found!")
        end
    end,
})

local MovementSection = MainTab:CreateSection("Movement")

local WalkSpeedSlider = MainTab:CreateSlider({
    Name = "💨 Walk Speed",
    Range = {16, 200},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "WalkSpeedSlider",
    Callback = function(Value)
        local humanoid = safeGetHumanoid()
        if humanoid then
            humanoid.WalkSpeed = Value
            notify("Speed Changed", "Walk speed set to " .. Value)
        end
    end,
})

local JumpPowerSlider = MainTab:CreateSlider({
    Name = "🦘 Jump Power",
    Range = {50, 200},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = 50,
    Flag = "JumpPowerSlider",
    Callback = function(Value)
        local humanoid = safeGetHumanoid()
        if humanoid then
            humanoid.JumpPower = Value
            notify("Jump Power Changed", "Jump power set to " .. Value)
        end
    end,
})

local ServerActionsSection = MainTab:CreateSection("Server Actions")

local ServerHopButton = MainTab:CreateButton({
    Name = "🔄 Server Hop",
    Callback = function()
        notify("Server Hop", "Searching for a new server...")
        wait(2)
        
        local success, errorMessage = pcall(function()
            local servers = game:GetService("HttpService"):JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"))
            local serverList = servers.data
            
            if #serverList > 0 then
                local randomServer = serverList[math.random(1, #serverList)]
                TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer.id, LocalPlayer)
            else
                notify("Error", "No servers found!")
            end
        end)
        
        if not success then
            notify("Error", "Failed to find servers: " .. tostring(errorMessage))
        end
    end,
})

local RejoinButton = MainTab:CreateButton({
    Name = "🔁 Rejoin",
    Callback = function()
        notify("Rejoining Game", "You will rejoin in 3 seconds...")
        wait(3)
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end,
})

local ExitButton = MainTab:CreateButton({
    Name = "🚪 Exit",
    Callback = function()
        notify("Exiting Game", "Game will close in 3 seconds...")
        wait(3)
        game:Shutdown()
    end,
})

-- Helper Tab Features
local AntiFeaturesSection = HelperTab:CreateSection("Anti Features")

local AntiAFKToggle = HelperTab:CreateToggle({
    Name = "⏱️ Anti AFK",
    CurrentValue = false,
    Flag = "AntiAFKToggle",
    Callback = function(Value)
        if Value then
            connections["AntiAFK"] = LocalPlayer.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
            notify("Anti AFK Enabled", "You won't be kicked for AFK")
        else
            cleanupConnection("AntiAFK")
            notify("Anti AFK Disabled", "AFK detection is active")
        end
    end,
})

local MovementFeaturesSection = HelperTab:CreateSection("Movement Features")

local InfiniteJumpToggle = HelperTab:CreateToggle({
    Name = "🦘 Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJumpToggle",
    Callback = function(Value)
        if Value then
            connections["InfiniteJump"] = UserInputService.JumpRequest:Connect(function()
                local humanoid = safeGetHumanoid()
                if humanoid then
                    humanoid:ChangeState("Jumping")
                end
            end)
            notify("Infinite Jump Enabled", "You can now jump infinitely!")
        else
            cleanupConnection("InfiniteJump")
            notify("Infinite Jump Disabled", "Normal jump behavior restored")
        end
    end,
})

local FlyToggle = HelperTab:CreateToggle({
    Name = "✈️ Fly",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(Value)
        if Value then
            notify("Fly Enabled", "Use WASD to move, Space to go up, Shift to go down")
            
            local character = safeGetCharacter()
            local rootPart = safeGetRootPart()
            
            if not rootPart then
                notify("Error", "Character not found!")
                return
            end
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.Parent = rootPart
            
            connections["FlyBodyVelocity"] = bodyVelocity
            
            connections["FlyLoop"] = RunService.Heartbeat:Connect(function()
                local currentRootPart = safeGetRootPart()
                if not currentRootPart then return end
                
                local camera = workspace.CurrentCamera
                local moveDirection = Vector3.new(0, 0, 0)
                local flySpeed = 50
                
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    moveDirection = moveDirection - Vector3.new(0, 1, 0)
                end
                
                if moveDirection.Magnitude > 0 then
                    bodyVelocity.Velocity = moveDirection.Unit * flySpeed
                else
                    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                end
            end)
        else
            cleanupConnection("FlyLoop")
            if connections["FlyBodyVelocity"] then
                connections["FlyBodyVelocity"]:Destroy()
                connections["FlyBodyVelocity"] = nil
            end
            notify("Fly Disabled", "Flight mode deactivated")
        end
    end,
})

local NoClipToggle = HelperTab:CreateToggle({
    Name = "👻 No Clip",
    CurrentValue = false,
    Flag = "NoClipToggle",
    Callback = function(Value)
        if Value then
            connections["NoClip"] = RunService.Stepped:Connect(function()
                local character = safeGetCharacter()
                if character then
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            notify("No Clip Enabled", "You can now walk through walls!")
        else
            cleanupConnection("NoClip")
            local character = safeGetCharacter()
            if character then
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        part.CanCollide = true
                    end
                end
            end
            notify("No Clip Disabled", "Collision restored")
        end
    end,
})

-- ESP Tab Features
local PlayerESPSection = ESPTab:CreateSection("Player ESP")

local PlayerESPToggle = ESPTab:CreateToggle({
    Name = "👤 Player ESP",
    CurrentValue = false,
    Flag = "PlayerESPToggle",
    Callback = function(Value)
        if Value then
            -- Basic player ESP implementation
            local function createESP(player)
                if player == LocalPlayer then return end
                
                local character = player.Character
                if not character then return end
                
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if not rootPart then return end
                
                local billboardGui = Instance.new("BillboardGui")
                billboardGui.Size = UDim2.new(0, 100, 0, 50)
                billboardGui.StudsOffset = Vector3.new(0, 3, 0)
                billboardGui.Parent = rootPart
                
                local nameLabel = Instance.new("TextLabel")
                nameLabel.Size = UDim2.new(1, 0, 1, 0)
                nameLabel.BackgroundTransparency = 1
                nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                nameLabel.TextStrokeTransparency = 0
                nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                nameLabel.Text = player.Name
                nameLabel.TextScaled = true
                nameLabel.Font = Enum.Font.SourceSansBold
                nameLabel.Parent = billboardGui
                
                return billboardGui
            end
            
            -- Create ESP for existing players
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character then
                    createESP(player)
                end
            end
            
            -- Create ESP for new players
            connections["PlayerESP"] = Players.PlayerAdded:Connect(function(player)
                player.CharacterAdded:Connect(function()
                    wait(1)
                    createESP(player)
                end)
            end)
            
            notify("Player ESP Enabled", "Player names are now visible")
        else
            cleanupConnection("PlayerESP")
            
            -- Remove existing ESP
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local billboardGui = player.Character.HumanoidRootPart:FindFirstChild("BillboardGui")
                    if billboardGui then
                        billboardGui:Destroy()
                    end
                end
            end
            
            notify("Player ESP Disabled", "Player markers hidden")
        end
    end,
})

-- Settings Tab
local InterfaceSection = SettingsTab:CreateSection("Interface")

local UIToggleKeybind = SettingsTab:CreateKeybind({
    Name = "🎨 Toggle UI",
    CurrentKeybind = "F4",
    HoldToInteract = false,
    Flag = "UIToggleKeybind",
    Callback = function(Keybind)
        notify("Keybind Changed", "UI toggle key set to " .. Keybind)
    end,
})

local InfoSection = SettingsTab:CreateSection("Information")

SettingsTab:CreateParagraph({
    Title = "📜 Script Information",
    Content = "Enhanced Script Hub v2.0\nCreated by OnlyRobloxScript\nFixed and improved version with better error handling and performance."
})

-- Cleanup function
local function cleanup()
    for name, connection in pairs(connections) do
        if connection and connection.Disconnect then
            connection:Disconnect()
        elseif connection and connection.Destroy then
            connection:Destroy()
        end
    end
    connections = {}
end

-- Character respawn handling
LocalPlayer.CharacterAdded:Connect(function()
    wait(1) -- Wait for character to fully load
    
    -- Reapply walk speed if it was changed
    local humanoid = safeGetHumanoid()
    if humanoid then
        local walkSpeedValue = Rayfield.Flags["WalkSpeedSlider"]
        if walkSpeedValue and walkSpeedValue.CurrentValue ~= 16 then
            humanoid.WalkSpeed = walkSpeedValue.CurrentValue
        end
        
        local jumpPowerValue = Rayfield.Flags["JumpPowerSlider"]
        if jumpPowerValue and jumpPowerValue.CurrentValue ~= 50 then
            humanoid.JumpPower = jumpPowerValue.CurrentValue
        end
    end
end)

-- Initialize the interface
pcall(function()
    Rayfield:LoadConfiguration()
end)

notify("Script Loaded", "Enhanced Script Hub is ready!", 5)

-- Set keybind for UI toggle
Rayfield:SetKeybind("F4")

-- Clean up on game shutdown
game:BindToClose(cleanup)

print("Enhanced Rayfield interface loaded successfully!")
