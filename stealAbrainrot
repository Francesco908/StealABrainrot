-- Water Hub Script - Ultimate Professional Edition v3.0
-- Fully functional with enhanced mobile optimization and beautiful UI

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local GuiService = game:GetService("GuiService")
local Lighting = game:GetService("Lighting")

-- Variables
local player = Players.LocalPlayer
local mouse = player:GetMouse()
local camera = workspace.CurrentCamera

-- Mobile detection
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Global variables
local waterHubGui = nil
local minimizedIcon = nil
local loadingGui = nil
local openGuis = {}
local connections = {}
local states = {
    infiniteJump = false,
    float = false,
    speedBoost = false,
    espPlayers = false,
    espLines = false,
    espBox = false,
    espSkeleton = false,
    espNames = false,
    noclip = false,
    fly = false,
    godMode = true
}

local floatBody = nil
local flyBody = nil
local basePosition = nil
local originalWalkSpeed = 16
local characterAddedConnection = nil
local espObjects = {}
local noclipConnection = nil
local godModeConnection = nil
local floatController = nil
local touchGui = nil

-- Color scheme
local colors = {
    primary = Color3.fromRGB(0, 170, 255),
    secondary = Color3.fromRGB(0, 140, 210),
    background = Color3.fromRGB(20, 25, 35),
    surface = Color3.fromRGB(30, 35, 45),
    success = Color3.fromRGB(40, 167, 69),
    danger = Color3.fromRGB(220, 53, 69),
    warning = Color3.fromRGB(255, 193, 7),
    text = Color3.fromRGB(255, 255, 255),
    textSecondary = Color3.fromRGB(200, 200, 200)
}

-- Utility Functions
local function getCharacter()
    return player.Character
end

local function getHumanoid()
    local char = getCharacter()
    return char and char:FindFirstChildOfClass("Humanoid")
end

local function getRootPart()
    local char = getCharacter()
    return char and (char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso"))
end

-- UI Creation Functions
local function createFrame(parent, size, position, color, transparency)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = color
    frame.BackgroundTransparency = transparency or 0
    frame.BorderSizePixel = 0
    frame.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, isMobile and 20 or 15)
    corner.Parent = frame
    
    -- Enhanced shadow for depth
    local shadow = Instance.new("ImageLabel")
    shadow.Size = UDim2.new(1, 40, 1, 40)
    shadow.Position = UDim2.new(0, -20, 0, -20)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.7
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Parent = frame
    shadow.ZIndex = frame.ZIndex - 1
    
    return frame
end

local function createButton(parent, size, position, color, text)
    local button = Instance.new("TextButton")
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = color
    button.Text = text
    button.TextColor3 = colors.text
    button.TextScaled = true
    button.Font = Enum.Font.SourceSansBold
    button.BorderSizePixel = 0
    button.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, isMobile and 12 or 8)
    corner.Parent = button
    
    -- Hover effect
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = color:Lerp(Color3.new(1, 1, 1), 0.2)
        }):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = color
        }):Play()
    end)
    
    return button
end

local function createSwitch(parent, position, callback, initialState)
    local switchFrame = createFrame(parent, 
        UDim2.new(0, isMobile and 70 or 60, 0, isMobile and 35 or 30), 
        position, 
        initialState and colors.primary or Color3.fromRGB(70, 70, 70), 
        0
    )
    switchFrame.Active = true
    
    local switchButton = createFrame(switchFrame, 
        UDim2.new(0, isMobile and 30 or 26, 0, isMobile and 30 or 26), 
        initialState and UDim2.new(1, -32, 0, 2.5) or UDim2.new(0, 2, 0, 2), 
        Color3.fromRGB(255, 255, 255), 
        0
    )
    
    local isOn = initialState or false
    
    local function toggle()
        isOn = not isOn
        
        local targetPos = isOn and UDim2.new(1, -(isMobile and 32 or 28), 0, 2) or UDim2.new(0, 2, 0, 2)
        local targetColor = isOn and colors.primary or Color3.fromRGB(70, 70, 70)
        
        TweenService:Create(switchButton, TweenInfo.new(0.3, Enum.EasingStyle.Back), {Position = targetPos}):Play()
        TweenService:Create(switchFrame, TweenInfo.new(0.3), {BackgroundColor3 = targetColor}):Play()
        
        if callback then
            callback(isOn)
        end
    end
    
    switchFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            toggle()
        end
    end)
    
    return switchFrame, toggle
end

local function makeDraggable(frame, dragArea)
    dragArea = dragArea or frame
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    local function update(input)
        if dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end
    
    dragArea.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    dragArea.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            update(input)
        end
    end)
end

-- Feature Functions (Forward Declarations)
local toggleGodMode, toggleInfiniteJump, toggleFloat, toggleSpeedBoost, toggleNoclip, toggleFly, toggleESP
local createFloatController, createMainGui, createMinimizedIcon, createTeleportGui

-- God Mode
toggleGodMode = function(enabled)
    states.godMode = enabled
    
    if godModeConnection then
        godModeConnection:Disconnect()
        godModeConnection = nil
    end
    
    if enabled then
        godModeConnection = RunService.Heartbeat:Connect(function()
            local humanoid = getHumanoid()
            if humanoid then
                humanoid.Health = humanoid.MaxHealth
                pcall(function()
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
                end)
            end
        end)
    end
end

-- Infinite Jump
toggleInfiniteJump = function(enabled)
    states.infiniteJump = enabled
    
    if connections.infiniteJump then
        connections.infiniteJump:Disconnect()
        connections.infiniteJump = nil
    end
    
    if enabled then
        connections.infiniteJump = UserInputService.JumpRequest:Connect(function()
            local humanoid = getHumanoid()
            if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                task.wait()
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
end

-- Float Controller
createFloatController = function()
    if touchGui then touchGui:Destroy() end
    
    touchGui = Instance.new("ScreenGui")
    touchGui.Name = "FloatController"
    touchGui.Parent = CoreGui
    touchGui.ResetOnSpawn = false
    
    local controller = createFrame(touchGui, 
        UDim2.new(0, 180, 0, 180), 
        UDim2.new(0.8, -90, 0.6, -90), 
        colors.surface, 
        0.2
    )
    controller.Active = true
    makeDraggable(controller)
    
    -- Joystick background
    local joystickBg = createFrame(controller, 
        UDim2.new(0.8, 0, 0.8, 0), 
        UDim2.new(0.1, 0, 0.1, 0), 
        Color3.fromRGB(50, 50, 50), 
        0.3
    )
    
    local joystickKnob = createFrame(joystickBg, 
        UDim2.new(0.4, 0, 0.4, 0), 
        UDim2.new(0.3, 0, 0.3, 0), 
        colors.primary, 
        0
    )
    
    local dragging = false
    local centerPos = UDim2.new(0.3, 0, 0.3, 0)
    
    floatController = {
        moveVector = Vector3.new(0, 0, 0)
    }
    
    joystickBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    
    joystickBg.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            joystickKnob.Position = centerPos
            floatController.moveVector = Vector3.new(0, 0, 0)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.Touch then
            local relativePos = input.Position - joystickBg.AbsolutePosition
            local centerX = joystickBg.AbsoluteSize.X / 2
            local centerY = joystickBg.AbsoluteSize.Y / 2
            
            local deltaX = math.clamp((relativePos.X - centerX) / centerX, -1, 1)
            local deltaY = math.clamp((relativePos.Y - centerY) / centerY, -1, 1)
            
            joystickKnob.Position = UDim2.new(0.3 + deltaX * 0.3, 0, 0.3 + deltaY * 0.3, 0)
            
            local cam = workspace.CurrentCamera
            floatController.moveVector = (cam.CFrame.RightVector * deltaX + cam.CFrame.LookVector * -deltaY) * 50
        end
    end)
end

-- Float
toggleFloat = function(enabled)
    states.float = enabled
    
    if floatBody then
        floatBody:Destroy()
        floatBody = nil
    end
    
    if touchGui then
        touchGui:Destroy()
        touchGui = nil
    end
    
    if connections.floatUpdate then
        connections.floatUpdate:Disconnect()
        connections.floatUpdate = nil
    end
    
    if enabled then
        local rootPart = getRootPart()
        if rootPart then
            floatBody = Instance.new("BodyPosition")
            floatBody.MaxForce = Vector3.new(4000, 4000, 4000)
            floatBody.Position = rootPart.Position
            floatBody.Parent = rootPart
            
            if isMobile then
                createFloatController()
            end
            
            connections.floatUpdate = RunService.Heartbeat:Connect(function()
                if not floatBody or not floatBody.Parent then
                    states.float = false
                    return
                end
                
                local moveVector = Vector3.new(0, 0, 0)
                
                if isMobile and floatController then
                    moveVector = floatController.moveVector
                else
                    local cam = workspace.CurrentCamera
                    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                        moveVector = moveVector + cam.CFrame.LookVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                        moveVector = moveVector - cam.CFrame.LookVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                        moveVector = moveVector - cam.CFrame.RightVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                        moveVector = moveVector + cam.CFrame.RightVector
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                        moveVector = moveVector + Vector3.new(0, 1, 0)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                        moveVector = moveVector - Vector3.new(0, 1, 0)
                    end
                    moveVector = moveVector * 50
                end
                
                floatBody.Position = floatBody.Position + moveVector * 0.1
            end)
        end
    end
end

-- Speed Boost
toggleSpeedBoost = function(enabled)
    states.speedBoost = enabled
    local humanoid = getHumanoid()
    
    if humanoid then
        if enabled then
            originalWalkSpeed = humanoid.WalkSpeed
            humanoid.WalkSpeed = 100
        else
            humanoid.WalkSpeed = originalWalkSpeed
        end
    end
end

-- Noclip
toggleNoclip = function(enabled)
    states.noclip = enabled
    
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    
    if enabled then
        noclipConnection = RunService.Stepped:Connect(function()
            local character = getCharacter()
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        local character = getCharacter()
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

-- Fly
toggleFly = function(enabled)
    states.fly = enabled
    
    if connections.flyControl then
        connections.flyControl:Disconnect()
        connections.flyControl = nil
    end
    
    if enabled then
        connections.flyControl = RunService.Heartbeat:Connect(function()
            local rootPart = getRootPart()
            local humanoid = getHumanoid()
            
            if not rootPart or not humanoid then 
                states.fly = false
                return 
            end
            
            local cam = workspace.CurrentCamera
            local moveVector = Vector3.new(0, 0, 0)
            
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + cam.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector - cam.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector - cam.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + cam.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveVector = moveVector + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                moveVector = moveVector - Vector3.new(0, 1, 0)
            end
            
            rootPart.CFrame = rootPart.CFrame + moveVector * 0.5
            rootPart.Velocity = Vector3.new(0, 0, 0)
            rootPart.RotVelocity = Vector3.new(0, 0, 0)
        end)
    end
end

-- ESP System
local function createAdvancedESP(targetPlayer)
    if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local character = targetPlayer.Character
    local rootPart = character.HumanoidRootPart
    
    if espObjects[targetPlayer] then
        for _, obj in pairs(espObjects[targetPlayer]) do
            if obj then obj:Destroy() end
        end
    end
    
    espObjects[targetPlayer] = {}
    
    -- ESP Box
    if states.espBox then
        local box = Instance.new("BoxHandleAdornment")
        box.Size = character:GetExtentsSize()
        box.Color3 = Color3.fromRGB(255, 100, 100)
        box.Transparency = 0.3
        box.AlwaysOnTop = true
        box.ZIndex = 10
        box.Adornee = rootPart
        box.Parent = rootPart
        table.insert(espObjects[targetPlayer], box)
    end
    
    -- ESP Lines
    if states.espLines then
        local myRoot = getRootPart()
        if myRoot then
            local line = Instance.new("Beam")
            line.Color = ColorSequence.new(Color3.fromRGB(100, 255, 100))
            line.Transparency = NumberSequence.new(0.5)
            line.Width0 = 0.1
            line.Width1 = 0.1
            line.FaceCamera = true
            
            local attachment0 = Instance.new("Attachment", rootPart)
            local attachment1 = Instance.new("Attachment", myRoot)
            
            line.Attachment0 = attachment0
            line.Attachment1 = attachment1
            line.Parent = rootPart
            
            table.insert(espObjects[targetPlayer], line)
            table.insert(espObjects[targetPlayer], attachment0)
            table.insert(espObjects[targetPlayer], attachment1)
        end
    end
    
    -- ESP Skeleton
    if states.espSkeleton then
        local function createBone(part1Name, part2Name)
            local part1 = character:FindFirstChild(part1Name) or character:FindFirstChild(part1Name:gsub("Upper", ""):gsub("Lower", ""))
            local part2 = character:FindFirstChild(part2Name) or character:FindFirstChild(part2Name:gsub("Upper", ""):gsub("Lower", ""))
            
            if part1 and part2 then
                local beam = Instance.new("Beam")
                beam.Color = ColorSequence.new(Color3.fromRGB(255, 255, 100))
                beam.Transparency = NumberSequence.new(0.3)
                beam.Width0 = 0.1
                beam.Width1 = 0.1
                beam.FaceCamera = true
                
                local att1 = Instance.new("Attachment", part1)
                local att2 = Instance.new("Attachment", part2)
                
                beam.Attachment0 = att1
                beam.Attachment1 = att2
                beam.Parent = part1
                
                table.insert(espObjects[targetPlayer], beam)
                table.insert(espObjects[targetPlayer], att1)
                table.insert(espObjects[targetPlayer], att2)
            end
        end
        
        -- R15 skeleton
        createBone("Head", "UpperTorso")
        createBone("UpperTorso", "LowerTorso")
        createBone("UpperTorso", "LeftUpperArm")
        createBone("LeftUpperArm", "LeftLowerArm")
        createBone("LeftLowerArm", "LeftHand")
        createBone("UpperTorso", "RightUpperArm")
        createBone("RightUpperArm", "RightLowerArm")
        createBone("RightLowerArm", "RightHand")
        createBone("LowerTorso", "LeftUpperLeg")
        createBone("LeftUpperLeg", "LeftLowerLeg")
        createBone("LeftLowerLeg", "LeftFoot")
        createBone("LowerTorso", "RightUpperLeg")
        createBone("RightUpperLeg", "RightLowerLeg")
        createBone("RightLowerLeg", "RightFoot")
        
        -- R6 skeleton fallback
        createBone("Head", "Torso")
        createBone("Torso", "Left Arm")
        createBone("Torso", "Right Arm")
        createBone("Torso", "Left Leg")
        createBone("Torso", "Right Leg")
    end
    
    -- ESP Names
    if states.espNames then
        local billboard = Instance.new("BillboardGui")
        billboard.Adornee = rootPart
        billboard.Size = UDim2.new(0, 200, 0, 80)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.Parent = rootPart
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = targetPlayer.Name
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextScaled = true
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextStrokeTransparency = 0
        nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        nameLabel.Parent = billboard
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local healthLabel = Instance.new("TextLabel")
            healthLabel.Size = UDim2.new(1, 0, 0.5, 0)
            healthLabel.Position = UDim2.new(0, 0, 0.5, 0)
            healthLabel.BackgroundTransparency = 1
            healthLabel.Text = math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
            healthLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
            healthLabel.TextScaled = true
            healthLabel.Font = Enum.Font.SourceSans
            healthLabel.TextStrokeTransparency = 0
            healthLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
            healthLabel.Parent = billboard
        end
        
        table.insert(espObjects[targetPlayer], billboard)
    end
end

toggleESP = function(espType, enabled)
    states[espType] = enabled
    
    for player, objects in pairs(espObjects) do
        for _, obj in pairs(objects) do
            if obj then obj:Destroy() end
        end
    end
    espObjects = {}
    
    if connections.espUpdate then
        connections.espUpdate:Disconnect()
        connections.espUpdate = nil
    end
    
    if states.espBox or states.espLines or states.espSkeleton or states.espNames then
        connections.espUpdate = RunService.Heartbeat:Connect(function()
            for _, targetPlayer in pairs(Players:GetPlayers()) do
                if targetPlayer ~= player then
                    createAdvancedESP(targetPlayer)
                end
            end
        end)
    end
end

-- Teleport GUI
createTeleportGui = function()
    local tpGui = Instance.new("ScreenGui")
    tpGui.Name = "TeleportGui"
    tpGui.Parent = CoreGui
    table.insert(openGuis, tpGui)
    
    local tpFrame = createFrame(tpGui, 
        UDim2.new(0, isMobile and 280 or 220, 0, isMobile and 140 or 120), 
        UDim2.new(0.5, isMobile and -140 or -110, 0.3, 0), 
        colors.surface, 
        0.05
    )
    tpFrame.Active = true
    makeDraggable(tpFrame)
    
    -- Header
    local header = createFrame(tpFrame, 
        UDim2.new(1, 0, 0, isMobile and 40 or 35), 
        UDim2.new(0, 0, 0, 0), 
        colors.primary, 
        0
    )
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -50, 1, 0)
    title.Position = UDim2.new(0, 10, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "🚀 Teleport"
    title.TextColor3 = colors.text
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = header
    
    local closeBtn = createButton(header, 
        UDim2.new(0, isMobile and 35 or 30, 0, isMobile and 35 or 30), 
        UDim2.new(1, isMobile and -40 or -35, 0, 2.5), 
        colors.danger, 
        "✕"
    )
    
    -- Buttons
    local upBtn = createButton(tpFrame, 
        UDim2.new(0, isMobile and 110 or 90, 0, isMobile and 45 or 35), 
        UDim2.new(0, 20, 0, isMobile and 60 or 50), 
        colors.success, 
        "⬆️ UP"
    )
    
    local downBtn = createButton(tpFrame, 
        UDim2.new(0, isMobile and 110 or 90, 0, isMobile and 45 or 35), 
        UDim2.new(1, -isMobile and 130 or -110, 0, isMobile and 60 or 50), 
        colors.danger, 
        "⬇️ DOWN"
    )
    
    -- Events
    closeBtn.MouseButton1Click:Connect(function()
        tpGui:Destroy()
    end)
    
    upBtn.MouseButton1Click:Connect(function()
        local rootPart = getRootPart()
        if rootPart then
            rootPart.CFrame = rootPart.CFrame + Vector3.new(0, 50, 0)
        end
    end)
    
    downBtn.MouseButton1Click:Connect(function()
        local rootPart = getRootPart()
        if rootPart then
            rootPart.CFrame = rootPart.CFrame - Vector3.new(0, 50, 0)
        end
    end)
end

-- Minimized Icon
createMinimizedIcon = function()
    if minimizedIcon then
        minimizedIcon:Destroy()
    end
    
    minimizedIcon = Instance.new("ScreenGui")
    minimizedIcon.Name = "WaterHubMinimized"
    minimizedIcon.Parent = CoreGui
    minimizedIcon.ResetOnSpawn = false
    
    local waterDrop = Instance.new("ImageButton")
    waterDrop.Size = UDim2.new(0, isMobile and 90 or 70, 0, isMobile and 90 or 70)
    waterDrop.Position = UDim2.new(0, 10, 0, 10)
    waterDrop.BackgroundTransparency = 1
    waterDrop.Image = "rbxassetid://6034684930"
    waterDrop.ImageColor3 = colors.primary
    waterDrop.Parent = minimizedIcon
    waterDrop.Active = true
    
    makeDraggable(waterDrop)
    
    -- Spinning animation
    local spinConnection = RunService.Heartbeat:Connect(function()
        waterDrop.Rotation = waterDrop.Rotation + 2
    end)
    
    -- Pulse effect
    spawn(function()
        local pulse = 0
        while minimizedIcon and minimizedIcon.Parent do
            pulse = pulse + 0.05
            waterDrop.ImageTransparency = 0.1 + math.sin(pulse) * 0.2
            local scale = 1 + math.sin(pulse * 2) * 0.05
            waterDrop.Size = UDim2.new(0, (isMobile and 90 or 70) * scale, 0, (isMobile and 90 or 70) * scale)
            wait()
        end
    end)
    
    waterDrop.MouseButton1Click:Connect(function()
        -- Splash animation
        local splash = Instance.new("ImageLabel")
        splash.Size = UDim2.new(0, 20, 0, 20)
        splash.Position = UDim2.new(0.5, -10, 0.5, -10)
        splash.BackgroundTransparency = 1
        splash.Image = "rbxassetid://6034684930"
        splash.ImageColor3 = colors.primary
        splash.Parent = waterDrop
        
        TweenService:Create(splash, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
            Size = UDim2.new(0, 200, 0, 200),
            Position = UDim2.new(0.5, -100, 0.5, -100),
            ImageTransparency = 1
        }):Play()
        
        wait(0.3)
        
        if spinConnection then
            spinConnection:Disconnect()
        end
        
        minimizedIcon:Destroy()
        minimizedIcon = nil
        createMainGui()
    end)
end

-- Main GUI
createMainGui = function()
    if waterHubGui then
        waterHubGui:Destroy()
    end
    
    waterHubGui = Instance.new("ScreenGui")
    waterHubGui.Name = "WaterHubMain"
    waterHubGui.Parent = CoreGui
    waterHubGui.ResetOnSpawn = false
    table.insert(openGuis, waterHubGui)
    
    -- Main frame
    local mainFrame = createFrame(waterHubGui, 
        UDim2.new(0, isMobile and 450 or 380, 0, isMobile and 500 or 350), 
        UDim2.new(0.5, isMobile and -225 or -190, 0.5, isMobile and -250 or -175), 
        colors.background, 
        0
    )
    mainFrame.Active = true
    
    -- Entrance animation
    mainFrame.Position = UDim2.new(0.5, isMobile and -225 or -190, 1.5, 0)
    TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
        Position = UDim2.new(0.5, isMobile and -225 or -190, 0.5, isMobile and -250 or -175)
    }):Play()
    
    -- Header
    local header = createFrame(mainFrame, 
        UDim2.new(1, 0, 0, isMobile and 50 or 40), 
        UDim2.new(0, 0, 0, 0), 
        colors.primary, 
        0
    )
    makeDraggable(mainFrame, header)
    
    -- Title with water icon
    local titleContainer = Instance.new("Frame")
    titleContainer.Size = UDim2.new(0.5, 0, 1, 0)
    titleContainer.BackgroundTransparency = 1
    titleContainer.Parent = header
    
    local waterIcon = Instance.new("ImageLabel")
    waterIcon.Size = UDim2.new(0, isMobile and 35 or 30, 0, isMobile and 35 or 30)
    waterIcon.Position = UDim2.new(0, 10, 0.5, -(isMobile and 17.5 or 15))
    waterIcon.BackgroundTransparency = 1
    waterIcon.Image = "rbxassetid://6034684930"
    waterIcon.ImageColor3 = colors.text
    waterIcon.Parent = titleContainer
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -50, 1, 0)
    title.Position = UDim2.new(0, 50, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Water Hub"
    title.TextColor3 = colors.text
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = titleContainer
    
    -- Window controls
    local minimizeBtn = createButton(header, 
        UDim2.new(0, isMobile and 40 or 35, 0, isMobile and 40 or 35), 
        UDim2.new(1, isMobile and -90 or -75, 0.5, -(isMobile and 20 or 17.5)), 
        colors.warning, 
        "−"
    )
    
    local closeBtn = createButton(header, 
        UDim2.new(0, isMobile and 40 or 35, 0, isMobile and 40 or 35), 
        UDim2.new(1, isMobile and -45 or -40, 0.5, -(isMobile and 20 or 17.5)), 
        colors.danger, 
        "✕"
    )
    
    -- Tab system
    local tabContainer = createFrame(mainFrame, 
        UDim2.new(1, -20, 0, isMobile and 45 or 35), 
        UDim2.new(0, 10, 0, isMobile and 60 or 50), 
        colors.surface, 
        0
    )
    
    local tabs = {"Main", "Visual", "Misc", "Server"}
    local tabButtons = {}
    local contentFrames = {}
    
    for i, tabName in ipairs(tabs) do
        local tabBtn = createButton(tabContainer, 
            UDim2.new(0.25, -5, 1, -10), 
            UDim2.new((i-1) * 0.25 + 0.0125, 0, 0, 5), 
            i == 1 and colors.primary or colors.surface:Lerp(Color3.new(1, 1, 1), 0.1), 
            tabName
        )
        tabBtn.Font = Enum.Font.SourceSans
        tabButtons[i] = tabBtn
        
        -- Content frame
        local contentFrame = createFrame(mainFrame, 
            UDim2.new(1, -20, 1, -(isMobile and 120 or 100)), 
            UDim2.new(0, 10, 0, isMobile and 110 or 90), 
            colors.surface, 
            0
        )
        contentFrame.Visible = (i == 1)
        contentFrame.ClipsDescendants = true
        
        -- Scrolling frame
        local scrollFrame = Instance.new("ScrollingFrame")
        scrollFrame.Size = UDim2.new(1, -10, 1, -10)
        scrollFrame.Position = UDim2.new(0, 5, 0, 5)
        scrollFrame.BackgroundTransparency = 1
        scrollFrame.BorderSizePixel = 0
        scrollFrame.ScrollBarThickness = 8
        scrollFrame.ScrollBarImageColor3 = colors.primary
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        scrollFrame.Parent = contentFrame
        
        contentFrames[i] = scrollFrame
    end
    
    -- Tab switching
    for i, btn in ipairs(tabButtons) do
        btn.MouseButton1Click:Connect(function()
            for j, frame in ipairs(contentFrames) do
                frame.Parent.Visible = (j == i)
            end
            for j, button in ipairs(tabButtons) do
                button.BackgroundColor3 = (j == i) and colors.primary or colors.surface:Lerp(Color3.new(1, 1, 1), 0.1)
            end
        end)
    end
    
    -- MAIN TAB
    local mainContent = contentFrames[1]
    local yPos = 10
    
    local function addFeature(text, icon, callback, initialState)
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, -20, 0, isMobile and 45 or 35)
        container.Position = UDim2.new(0, 10, 0, yPos)
        container.BackgroundTransparency = 1
        container.Parent = mainContent
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -80, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = icon .. " " .. text
        label.TextColor3 = colors.text
        label.TextScaled = true
        label.Font = Enum.Font.SourceSans
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = container
        
        createSwitch(container, UDim2.new(1, -(isMobile and 70 or 60), 0.5, -(isMobile and 17.5 or 15)), callback, initialState)
        
        yPos = yPos + (isMobile and 50 or 40)
    end
    
    addFeature("God Mode", "🛡️", toggleGodMode, states.godMode)
    addFeature("Infinite Jump", "🦘", toggleInfiniteJump, states.infiniteJump)
    addFeature("Float (Mobile)", "🎈", toggleFloat, states.float)
    addFeature("Speed Boost", "⚡", toggleSpeedBoost, states.speedBoost)
    addFeature("Noclip", "👻", toggleNoclip, states.noclip)
    addFeature("Fly", "✈️", toggleFly, states.fly)
    
    -- Teleport button
    local tpBtn = createButton(mainContent, 
        UDim2.new(0, isMobile and 160 or 140, 0, isMobile and 45 or 35), 
        UDim2.new(0, 10, 0, yPos), 
        colors.secondary, 
        "🚀 Teleport"
    )
    
    mainContent.CanvasSize = UDim2.new(0, 0, 0, yPos + (isMobile and 55 or 45))
    
    -- VISUAL TAB
    local visualContent = contentFrames[2]
    yPos = 10
    
    local function addESP(text, icon, espType)
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, -20, 0, isMobile and 45 or 35)
        container.Position = UDim2.new(0, 10, 0, yPos)
        container.BackgroundTransparency = 1
        container.Parent = visualContent
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -80, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = icon .. " " .. text
        label.TextColor3 = colors.text
        label.TextScaled = true
        label.Font = Enum.Font.SourceSans
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = container
        
        createSwitch(container, UDim2.new(1, -(isMobile and 70 or 60), 0.5, -(isMobile and 17.5 or 15)), function(enabled)
            toggleESP(espType, enabled)
        end, states[espType])
        
        yPos = yPos + (isMobile and 50 or 40)
    end
    
    addESP("ESP Box", "📦", "espBox")
    addESP("ESP Lines", "📐", "espLines")
    addESP("ESP Skeleton", "💀", "espSkeleton")
    addESP("ESP Names", "🏷️", "espNames")
    
    visualContent.CanvasSize = UDim2.new(0, 0, 0, yPos)
    
    -- MISC TAB
    local miscContent = contentFrames[3]
    
    local miscLabel = Instance.new("TextLabel")
    miscLabel.Size = UDim2.new(1, -20, 0, 100)
    miscLabel.Position = UDim2.new(0, 10, 0, 10)
    miscLabel.BackgroundTransparency = 1
    miscLabel.Text = "🛠️ More features coming soon!"
    miscLabel.TextColor3 = colors.textSecondary
    miscLabel.TextScaled = true
    miscLabel.Font = Enum.Font.SourceSansItalic
    miscLabel.Parent = miscContent
    
    -- SERVER TAB
    local serverContent = contentFrames[4]
    yPos = 10
    
    local function addServerButton(text, icon, color, callback)
        local btn = createButton(serverContent, 
            UDim2.new(1, -20, 0, isMobile and 50 or 40), 
            UDim2.new(0, 10, 0, yPos), 
            color, 
            icon .. " " .. text
        )
        btn.MouseButton1Click:Connect(callback)
        yPos = yPos + (isMobile and 60 or 50)
    end
    
    addServerButton("Rejoin", "🔄", colors.primary, function()
        TeleportService:Teleport(game.PlaceId, player)
    end)
    
    addServerButton("Leave", "🚪", colors.danger, function()
        player:Kick("Left the game")
    end)
    
    addServerButton("Server Hop", "🌐", colors.success, function()
        local servers = {}
        local req = syn and syn.request or http_request or request
        
        if req then
            local success, result = pcall(function()
                return req({
                    Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100",
                    Method = "GET"
                })
            end)
            
            if success and result.Success then
                local data = HttpService:JSONDecode(result.Body)
                for _, server in pairs(data.data) do
                    if server.playing < server.maxPlayers and server.id ~= game.JobId then
                        table.insert(servers, server.id)
                    end
                end
                
                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
                end
            end
        end
    end)
    
    serverContent.CanvasSize = UDim2.new(0, 0, 0, yPos)
    
    -- Event handlers
    minimizeBtn.MouseButton1Click:Connect(function()
        waterHubGui:Destroy()
        createMinimizedIcon()
    end)
    
    closeBtn.MouseButton1Click:Connect(function()
        -- Close all GUIs
        for _, gui in pairs(openGuis) do
            if gui and gui.Parent then
                gui:Destroy()
            end
        end
        openGuis = {}
        
        -- Disable all features
        for stateName, _ in pairs(states) do
            if states[stateName] then
                if stateName == "infiniteJump" then toggleInfiniteJump(false)
                elseif stateName == "float" then toggleFloat(false)
                elseif stateName == "speedBoost" then toggleSpeedBoost(false)
                elseif stateName == "noclip" then toggleNoclip(false)
                elseif stateName == "fly" then toggleFly(false)
                elseif stateName == "godMode" then toggleGodMode(false)
                elseif stateName:find("esp") then toggleESP(stateName, false)
                end
            end
        end
        
        waterHubGui:Destroy()
        if minimizedIcon then
            minimizedIcon:Destroy()
        end
    end)
    
    tpBtn.MouseButton1Click:Connect(function()
        createTeleportGui()
    end)
end

-- Loading Screen
local function createLoadingScreen()
    loadingGui = Instance.new("ScreenGui")
    loadingGui.Name = "WaterHubLoading"
    loadingGui.Parent = CoreGui
    loadingGui.ResetOnSpawn = false
    loadingGui.DisplayOrder = 999999
    loadingGui.IgnoreGuiInset = true
    
    -- Background
    local bg = Instance.new("Frame")
    bg.Size = UDim2.new(1, 0, 1, 36)
    bg.Position = UDim2.new(0, 0, 0, -36)
    bg.BackgroundColor3 = colors.background
    bg.BorderSizePixel = 0
    bg.Parent = loadingGui
    
    -- Gradient
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, colors.background),
        ColorSequenceKeypoint.new(0.5, colors.background:Lerp(colors.primary, 0.1)),
        ColorSequenceKeypoint.new(1, colors.background)
    })
    gradient.Rotation = 45
    gradient.Parent = bg
    
    -- Animated particles
    for i = 1, 30 do
        spawn(function()
            local particle = Instance.new("Frame")
            particle.Size = UDim2.new(0, math.random(2, 8), 0, math.random(2, 8))
            particle.Position = UDim2.new(math.random(), 0, math.random(), 0)
            particle.BackgroundColor3 = colors.primary
            particle.BackgroundTransparency = math.random(5, 8) / 10
            particle.BorderSizePixel = 0
            particle.Parent = bg
            
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(1, 0)
            corner.Parent = particle
            
            while loadingGui and loadingGui.Parent do
                local tween = TweenService:Create(particle, 
                    TweenInfo.new(math.random(3, 6), Enum.EasingStyle.Linear), 
                    {Position = UDim2.new(math.random(), 0, math.random(), 0)}
                )
                tween:Play()
                tween.Completed:Wait()
            end
        end)
    end
    
    -- Center container
    local container = Instance.new("Frame")
    container.Size = UDim2.new(0, 400, 0, 400)
    container.Position = UDim2.new(0.5, -200, 0.5, -200)
    container.BackgroundTransparency = 1
    container.Parent = loadingGui
    
    -- Water drop icon
    local waterDrop = Instance.new("ImageLabel")
    waterDrop.Size = UDim2.new(0, 200, 0, 200)
    waterDrop.Position = UDim2.new(0.5, -100, 0.5, -100)
    waterDrop.BackgroundTransparency = 1
    waterDrop.Image = "rbxassetid://6034684930"
    waterDrop.ImageColor3 = colors.primary
    waterDrop.Parent = container
    
    -- Spinning animation
    local spinConnection = RunService.Heartbeat:Connect(function()
        waterDrop.Rotation = waterDrop.Rotation + 2
    end)
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 80)
    title.Position = UDim2.new(0, 0, 0.5, 120)
    title.BackgroundTransparency = 1
    title.Text = "WATER HUB"
    title.TextColor3 = colors.text
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = container
    
    -- Version
    local version = Instance.new("TextLabel")
    version.Size = UDim2.new(1, 0, 0, 30)
    version.Position = UDim2.new(0, 0, 0.5, 200)
    version.BackgroundTransparency = 1
    version.Text = "Ultimate Edition v3.0"
    version.TextColor3 = colors.textSecondary
    version.TextScaled = true
    version.Font = Enum.Font.SourceSansItalic
    version.Parent = container
    
    -- Loading bar background
    local loadingBarBg = createFrame(container, 
        UDim2.new(0, 300, 0, 10), 
        UDim2.new(0.5, -150, 0.5, 250), 
        colors.surface, 
        0
    )
    
    -- Loading bar
    local loadingBar = createFrame(loadingBarBg, 
        UDim2.new(0, 0, 1, 0), 
        UDim2.new(0, 0, 0, 0), 
        colors.primary, 
        0
    )
    
    -- Loading text
    local loadingText = Instance.new("TextLabel")
    loadingText.Size = UDim2.new(1, 0, 0, 30)
    loadingText.Position = UDim2.new(0, 0, 0.5, 280)
    loadingText.BackgroundTransparency = 1
    loadingText.Text = "Initializing..."
    loadingText.TextColor3 = colors.textSecondary
    loadingText.TextScaled = true
    loadingText.Font = Enum.Font.SourceSans
    loadingText.Parent = container
    
    -- Loading sequence
    spawn(function()
        local steps = {
            {text = "Loading Water Hub...", progress = 0.1},
            {text = "Initializing modules...", progress = 0.25},
            {text = "Setting up ESP...", progress = 0.4},
            {text = "Configuring mobile controls...", progress = 0.55},
            {text = "Activating God Mode...", progress = 0.7},
            {text = "Preparing interface...", progress = 0.85},
            {text = "Almost ready...", progress = 0.95},
            {text = "Welcome!", progress = 1}
        }
        
        for _, step in ipairs(steps) do
            loadingText.Text = step.text
            TweenService:Create(loadingBar, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
                Size = UDim2.new(step.progress, 0, 1, 0)
            }):Play()
            wait(0.5)
        end
        
        wait(0.5)
        
        -- Fade out
        for _, element in pairs(loadingGui:GetDescendants()) do
            if element:IsA("Frame") then
                TweenService:Create(element, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
            elseif element:IsA("TextLabel") then
                TweenService:Create(element, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
            elseif element:IsA("ImageLabel") then
                TweenService:Create(element, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
            end
        end
        
        wait(0.5)
        
        if spinConnection then
            spinConnection:Disconnect()
        end
        
        loadingGui:Destroy()
        
        -- Create main GUI
        createMainGui()
        
        -- Enable God Mode
        wait(0.1)
        toggleGodMode(true)
    end)
end

-- Character respawn handler
local function onCharacterAdded(character)
    wait(0.5)
    
    -- Reapply active states
    if states.godMode then toggleGodMode(true) end
    if states.speedBoost then toggleSpeedBoost(true) end
    if states.infiniteJump then toggleInfiniteJump(true) end
    if states.float then toggleFloat(true) end
    if states.noclip then toggleNoclip(true) end
    if states.fly then toggleFly(true) end
end

-- Cleanup
Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == player then
        for _, connection in pairs(connections) do
            if connection then
                connection:Disconnect()
            end
        end
        if characterAddedConnection then
            characterAddedConnection:Disconnect()
        end
    end
end)

-- Setup
characterAddedConnection = player.CharacterAdded:Connect(onCharacterAdded)

-- Initialize
createLoadingScreen()
