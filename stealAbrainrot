-- Water Hub Mobile Enhanced by SKIBIDI 🌊
-- Versione ottimizzata per mobile e giochi con armi/superpoteri

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Configurazione
local CONFIG = {
    GUI_SIZE = UserInputService.TouchEnabled and UDim2.new(0, 450, 0, 400) or UDim2.new(0, 400, 0, 350),
    BUTTON_SIZE = UserInputService.TouchEnabled and 40 or 30,
    TEXT_SIZE = UserInputService.TouchEnabled and 18 or 16,
    ANIMATION_TIME = 0.3,
    ESP_UPDATE_RATE = 0.1,
    COMBAT_FEATURES = true
}

-- Cache per performance
local cache = {
    connections = {},
    esp_objects = {},
    tweens = {}
}

-- Utility functions
local function new(class, props)
    local inst = Instance.new(class)
    for k,v in pairs(props) do
        if inst[k] ~= nil then
            inst[k] = v
        end
    end
    return inst
end

local function animate(obj, props, time)
    local tween = TweenService:Create(obj, TweenInfo.new(time or CONFIG.ANIMATION_TIME), props)
    tween:Play()
    return tween
end

-- Anti-lag system
local function optimizedLoop(name, func, rate)
    if cache.connections[name] then
        cache.connections[name]:Disconnect()
    end
    
    local lastUpdate = 0
    cache.connections[name] = RunService.Heartbeat:Connect(function()
        local now = tick()
        if now - lastUpdate >= rate then
            lastUpdate = now
            func()
        end
    end)
end

-- Main GUI
local ScreenGui = new("ScreenGui", {
    Name = "WaterHubMobile",
    ResetOnSpawn = false,
    ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
    Parent = game:GetService("CoreGui")
})

-- Touch-friendly dragging system
local function makeDraggable(frame, handle)
    handle = handle or frame
    local dragging, dragStart, startPos
    
    local function startDrag(input)
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
    
    local function updateDrag(input)
        if dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end
    
    local function endDrag()
        dragging = false
    end
    
    -- Support both mouse and touch
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            startDrag(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or 
           input.UserInputType == Enum.UserInputType.Touch then
            updateDrag(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            endDrag()
        end
    end)
end

-- Main container with mobile optimization
local MainFrame = new("Frame", {
    Name = "MainContainer",
    Parent = ScreenGui,
    Size = CONFIG.GUI_SIZE,
    Position = UDim2.new(0.5, -CONFIG.GUI_SIZE.X.Offset/2, 0.5, -CONFIG.GUI_SIZE.Y.Offset/2),
    BackgroundColor3 = Color3.fromRGB(25, 25, 25),
    BorderSizePixel = 0,
    ClipsDescendants = true
})

new("UICorner", {Parent = MainFrame, CornerRadius = UDim.new(0, 15)})
new("UIStroke", {
    Parent = MainFrame,
    Color = Color3.fromRGB(100, 200, 255),
    Thickness = 2,
    Transparency = 0.5
})

-- Gradient background
local gradient = new("UIGradient", {
    Parent = MainFrame,
    Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 40)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 30))
    }),
    Rotation = 90
})

-- Header
local Header = new("Frame", {
    Name = "Header",
    Parent = MainFrame,
    Size = UDim2.new(1, 0, 0, CONFIG.BUTTON_SIZE + 10),
    BackgroundColor3 = Color3.fromRGB(20, 20, 30),
    BorderSizePixel = 0
})

new("UICorner", {Parent = Header, CornerRadius = UDim.new(0, 15)})

-- Title with animation
local Title = new("TextLabel", {
    Parent = Header,
    Size = UDim2.new(0.7, 0, 1, 0),
    Position = UDim2.new(0, 15, 0, 0),
    BackgroundTransparency = 1,
    Text = "💧 Water Hub Mobile",
    Font = Enum.Font.SourceSansBold,
    TextSize = CONFIG.TEXT_SIZE + 2,
    TextColor3 = Color3.fromRGB(100, 200, 255),
    TextXAlignment = Enum.TextXAlignment.Left
})

-- Window controls
local controls = {}
local controlButtons = {
    {icon = "—", name = "Minimize", color = Color3.fromRGB(255, 200, 0)},
    {icon = "✕", name = "Close", color = Color3.fromRGB(255, 100, 100)}
}

for i, btn in ipairs(controlButtons) do
    controls[btn.name] = new("TextButton", {
        Parent = Header,
        Size = UDim2.new(0, CONFIG.BUTTON_SIZE, 0, CONFIG.BUTTON_SIZE),
        Position = UDim2.new(1, -(CONFIG.BUTTON_SIZE + 5) * i, 0.5, -CONFIG.BUTTON_SIZE/2),
        BackgroundColor3 = btn.color,
        Text = btn.icon,
        Font = Enum.Font.SourceSansBold,
        TextSize = CONFIG.TEXT_SIZE,
        TextColor3 = Color3.new(1, 1, 1),
        AutoButtonColor = false
    })
    
    new("UICorner", {Parent = controls[btn.name], CornerRadius = UDim.new(0.5, 0)})
end

-- Minimized icon
local MinimizedIcon = new("ImageButton", {
    Parent = ScreenGui,
    Size = UDim2.new(0, 60, 0, 60),
    Position = UDim2.new(0, 20, 0.5, -30),
    BackgroundColor3 = Color3.fromRGB(25, 25, 35),
    Visible = false,
    Image = "rbxassetid://7072718307",
    ImageColor3 = Color3.fromRGB(100, 200, 255)
})

new("UICorner", {Parent = MinimizedIcon, CornerRadius = UDim.new(0.5, 0)})
new("UIStroke", {
    Parent = MinimizedIcon,
    Color = Color3.fromRGB(100, 200, 255),
    Thickness = 2
})

-- Tab system
local TabContainer = new("Frame", {
    Parent = MainFrame,
    Size = UDim2.new(1, -20, 0, CONFIG.BUTTON_SIZE),
    Position = UDim2.new(0, 10, 0, Header.Size.Y.Offset + 5),
    BackgroundTransparency = 1
})

local tabs = {"Combat", "Movement", "Visual", "Utility"}
local tabButtons = {}
local contentFrames = {}

-- Create tabs
for i, tabName in ipairs(tabs) do
    -- Tab button
    local tabBtn = new("TextButton", {
        Parent = TabContainer,
        Size = UDim2.new(1/#tabs, -5, 1, 0),
        Position = UDim2.new((i-1)/#tabs, 2.5, 0, 0),
        BackgroundColor3 = Color3.fromRGB(35, 35, 45),
        Text = tabName,
        Font = Enum.Font.SourceSansSemibold,
        TextSize = CONFIG.TEXT_SIZE,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        AutoButtonColor = false
    })
    
    new("UICorner", {Parent = tabBtn, CornerRadius = UDim.new(0, 10)})
    tabButtons[tabName] = tabBtn
    
    -- Content frame
    local content = new("ScrollingFrame", {
        Name = tabName.."Content",
        Parent = MainFrame,
        Size = UDim2.new(1, -20, 1, -(Header.Size.Y.Offset + TabContainer.Size.Y.Offset + 20)),
        Position = UDim2.new(0, 10, 0, Header.Size.Y.Offset + TabContainer.Size.Y.Offset + 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Color3.fromRGB(100, 200, 255),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Visible = i == 1
    })
    
    new("UIListLayout", {
        Parent = content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8)
    })
    
    contentFrames[tabName] = content
    
    -- Tab switching
    tabBtn.MouseButton1Click:Connect(function()
        for name, frame in pairs(contentFrames) do
            frame.Visible = false
            tabButtons[name].BackgroundColor3 = Color3.fromRGB(35, 35, 45)
            tabButtons[name].TextColor3 = Color3.fromRGB(200, 200, 200)
        end
        
        content.Visible = true
        animate(tabBtn, {BackgroundColor3 = Color3.fromRGB(100, 200, 255)})
        tabBtn.TextColor3 = Color3.new(1, 1, 1)
    end)
end

-- Active tab highlight
tabButtons["Combat"].BackgroundColor3 = Color3.fromRGB(100, 200, 255)
tabButtons["Combat"].TextColor3 = Color3.new(1, 1, 1)

-- Enhanced toggle switch component
local function createToggle(parent, name, icon, callback, default)
    local container = new("Frame", {
        Parent = parent,
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundColor3 = Color3.fromRGB(30, 30, 40),
        BorderSizePixel = 0
    })
    
    new("UICorner", {Parent = container, CornerRadius = UDim.new(0, 10)})
    
    local label = new("TextLabel", {
        Parent = container,
        Size = UDim2.new(0.7, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = icon.." "..name,
        Font = Enum.Font.SourceSansSemibold,
        TextSize = CONFIG.TEXT_SIZE,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local toggleBg = new("Frame", {
        Parent = container,
        Size = UDim2.new(0, 60, 0, 30),
        Position = UDim2.new(1, -70, 0.5, -15),
        BackgroundColor3 = Color3.fromRGB(60, 60, 70),
        BorderSizePixel = 0
    })
    
    new("UICorner", {Parent = toggleBg, CornerRadius = UDim.new(0.5, 0)})
    
    local toggleBtn = new("TextButton", {
        Parent = toggleBg,
        Size = UDim2.new(0, 26, 0, 26),
        Position = UDim2.new(0, 2, 0.5, -13),
        BackgroundColor3 = Color3.new(1, 1, 1),
        Text = "",
        AutoButtonColor = false
    })
    
    new("UICorner", {Parent = toggleBtn, CornerRadius = UDim.new(0.5, 0)})
    
    local enabled = default or false
    
    local function updateToggle()
        if enabled then
            animate(toggleBtn, {Position = UDim2.new(1, -28, 0.5, -13)})
            animate(toggleBg, {BackgroundColor3 = Color3.fromRGB(100, 200, 100)})
        else
            animate(toggleBtn, {Position = UDim2.new(0, 2, 0.5, -13)})
            animate(toggleBg, {BackgroundColor3 = Color3.fromRGB(60, 60, 70)})
        end
        
        if callback then
            callback(enabled)
        end
    end
    
    toggleBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or
           input.UserInputType == Enum.UserInputType.Touch then
            enabled = not enabled
            updateToggle()
        end
    end)
    
    if default then updateToggle() end
    
    return container, function(state) enabled = state; updateToggle() end
end

-- Slider component
local function createSlider(parent, name, icon, min, max, default, callback)
    local container = new("Frame", {
        Parent = parent,
        Size = UDim2.new(1, 0, 0, 70),
        BackgroundColor3 = Color3.fromRGB(30, 30, 40),
        BorderSizePixel = 0
    })
    
    new("UICorner", {Parent = container, CornerRadius = UDim.new(0, 10)})
    
    local label = new("TextLabel", {
        Parent = container,
        Size = UDim2.new(1, -20, 0, 25),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = icon.." "..name,
        Font = Enum.Font.SourceSansSemibold,
        TextSize = CONFIG.TEXT_SIZE,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local valueLabel = new("TextLabel", {
        Parent = container,
        Size = UDim2.new(0, 50, 0, 25),
        Position = UDim2.new(1, -60, 0, 5),
        BackgroundTransparency = 1,
        Text = tostring(default),
        Font = Enum.Font.SourceSansBold,
        TextSize = CONFIG.TEXT_SIZE,
        TextColor3 = Color3.fromRGB(100, 200, 255),
        TextXAlignment = Enum.TextXAlignment.Right
    })
    
    local sliderBg = new("Frame", {
        Parent = container,
        Size = UDim2.new(1, -20, 0, 6),
        Position = UDim2.new(0, 10, 1, -20),
        BackgroundColor3 = Color3.fromRGB(50, 50, 60),
        BorderSizePixel = 0
    })
    
    new("UICorner", {Parent = sliderBg, CornerRadius = UDim.new(0.5, 0)})
    
    local sliderFill = new("Frame", {
        Parent = sliderBg,
        Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(100, 200, 255),
        BorderSizePixel = 0
    })
    
    new("UICorner", {Parent = sliderFill, CornerRadius = UDim.new(0.5, 0)})
    
    local sliderBtn = new("TextButton", {
        Parent = sliderBg,
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new((default - min) / (max - min), -10, 0.5, -10),
        BackgroundColor3 = Color3.new(1, 1, 1),
        Text = "",
        AutoButtonColor = false
    })
    
    new("UICorner", {Parent = sliderBtn, CornerRadius = UDim.new(0.5, 0)})
    new("UIStroke", {
        Parent = sliderBtn,
        Color = Color3.fromRGB(100, 200, 255),
        Thickness = 2
    })
    
    local dragging = false
    
    local function updateSlider(input)
        local relativeX = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
        local value = math.floor(min + (max - min) * relativeX + 0.5)
        
        sliderBtn.Position = UDim2.new(relativeX, -10, 0.5, -10)
        sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
        valueLabel.Text = tostring(value)
        
        if callback then callback(value) end
    end
    
    sliderBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
                        input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    return container
end

-- Combat features
local combatContent = contentFrames["Combat"]

createToggle(combatContent, "Aimbot", "🎯", function(enabled)
    if enabled then
        optimizedLoop("aimbot", function()
            local target = nil
            local minDist = math.huge
            
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                    local dist = (player.Character.Head.Position - LocalPlayer.Character.Head.Position).Magnitude
                    if dist < minDist and dist < 200 then
                        minDist = dist
                        target = player
                    end
                end
            end
            
            if target and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local camera = workspace.CurrentCamera
                camera.CFrame = CFrame.lookAt(camera.CFrame.Position, target.Character.Head.Position)
            end
        end, 0.016)
    else
        if cache.connections["aimbot"] then
            cache.connections["aimbot"]:Disconnect()
        end
    end
end)

createToggle(combatContent, "Silent Aim", "🔇", function(enabled)
    -- Implementazione silent aim per giochi con armi
    getgenv().SilentAim = enabled
end)

createToggle(combatContent, "Kill Aura", "⚔️", function(enabled)
    if enabled then
        optimizedLoop("killaura", function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local dist = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                    if dist < 20 then
                        -- Trigger combat event
                        game:GetService("ReplicatedStorage").CombatEvent:FireServer(player.Character)
                    end
                end
            end
        end, 0.1)
    else
        if cache.connections["killaura"] then
            cache.connections["killaura"]:Disconnect()
        end
    end
end)

createSlider(combatContent, "FOV Size", "🔍", 50, 500, 200, function(value)
    -- Aggiorna FOV per aimbot
    getgenv().AimbotFOV = value
end)

createToggle(combatContent, "Hitbox Expander", "📦", function(enabled)
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hitbox = player.Character.HumanoidRootPart
            if enabled then
                hitbox.Size = Vector3.new(20, 20, 20)
                hitbox.Transparency = 0.7
            else
                hitbox.Size = Vector3.new(2, 2, 1)
                hitbox.Transparency = 1
            end
        end
    end
end)

-- Movement features
local movementContent = contentFrames["Movement"]

createToggle(movementContent, "Fly Mode", "🦅", function(enabled)
    if enabled then
        local bodyVel = new("BodyVelocity", {
            Parent = LocalPlayer.Character.HumanoidRootPart,
            MaxForce = Vector3.new(4000, 4000, 4000),
            Velocity = Vector3.new(0, 0, 0),
            Name = "FlyVelocity"
        })
        
        local bodyGyro = new("BodyGyro", {
            Parent = LocalPlayer.Character.HumanoidRootPart,
            MaxTorque = Vector3.new(4000, 4000, 4000),
            D = 100,
            Name = "FlyGyro"
        })
        
        cache.connections["fly"] = RunService.Heartbeat:Connect(function()
            local camera = workspace.CurrentCamera
            local moveVector = LocalPlayer.Character.Humanoid.MoveDirection
            bodyVel.Velocity = (camera.CFrame.LookVector * moveVector.Z + camera.CFrame.RightVector * moveVector.X) * 100
            bodyGyro.CFrame = camera.CFrame
        end)
    else
        if LocalPlayer.Character.HumanoidRootPart:FindFirstChild("FlyVelocity") then
            LocalPlayer.Character.HumanoidRootPart.FlyVelocity:Destroy()
        end
        if LocalPlayer.Character.HumanoidRootPart:FindFirstChild("FlyGyro") then
            LocalPlayer.Character.HumanoidRootPart.FlyGyro:Destroy()
        end
        if cache.connections["fly"] then
            cache.connections["fly"]:Disconnect()
        end
    end
end)

createSlider(movementContent, "Walk Speed", "🏃", 16, 200, 16, function(value)
    LocalPlayer.Character.Humanoid.WalkSpeed = value
end)

createSlider(movementContent, "Jump Power", "🦘", 50, 300, 50, function(value)
    LocalPlayer.Character.Humanoid.JumpPower = value
end)

createToggle(movementContent, "Infinite Jump", "♾️", function(enabled)
    if enabled then
        cache.connections["infjump"] = UserInputService.JumpRequest:Connect(function()
            LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end)
    else
        if cache.connections["infjump"] then
            cache.connections["infjump"]:Disconnect()
        end
    end
end)

createToggle(movementContent, "No Clip", "👻", function(enabled)
    if enabled then
        cache.connections["noclip"] = RunService.Stepped:Connect(function()
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end)
    else
        if cache.connections["noclip"] then
            cache.connections["noclip"]:Disconnect()
        end
    end
end)

-- Visual features
local visualContent = contentFrames["Visual"]

createToggle(visualContent, "Player ESP", "👁️", function(enabled)
    if enabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local highlight = new("Highlight", {
                    Parent = player.Character,
                    FillColor = player.TeamColor.Color,
                    OutlineColor = Color3.new(1, 1, 1),
                    FillTransparency = 0.5,
                    OutlineTransparency = 0,
                    Name = "WaterESP"
                })
                
                local billboard = new("BillboardGui", {
                    Parent = player.Character.Head,
                    Size = UDim2.new(0, 100, 0, 50),
                    StudsOffset = Vector3.new(0, 3, 0),
                    AlwaysOnTop = true,
                    Name = "WaterNameESP"
                })
                
                local nameLabel = new("TextLabel", {
                    Parent = billboard,
                    Size = UDim2.new(1, 0, 0.5, 0),
                    BackgroundTransparency = 1,
                    Text = player.Name,
                    Font = Enum.Font.SourceSansBold,
                    TextSize = 14,
                    TextColor3 = Color3.new(1, 1, 1),
                    TextStrokeTransparency = 0
                })
                
                local distLabel = new("TextLabel", {
                    Parent = billboard,
                    Size = UDim2.new(1, 0, 0.5, 0),
                    Position = UDim2.new(0, 0, 0.5, 0),
                    BackgroundTransparency = 1,
                    Text = "0m",
                    Font = Enum.Font.SourceSans,
                    TextSize = 12,
                    TextColor3 = Color3.new(1, 1, 1),
                    TextStrokeTransparency = 0
                })
                
                cache.esp_objects[player] = {highlight, billboard}
                
                -- Update distance
                optimizedLoop("esp_"..player.Name, function()
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local dist = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                        distLabel.Text = string.format("%.1fm", dist)
                    end
                end, CONFIG.ESP_UPDATE_RATE)
            end
        end
    else
        for player, objects in pairs(cache.esp_objects) do
            for _, obj in pairs(objects) do
                obj:Destroy()
            end
            if cache.connections["esp_"..player.Name] then
                cache.connections["esp_"..player.Name]:Disconnect()
            end
        end
        cache.esp_objects = {}
    end
end)

createToggle(visualContent, "Fullbright", "☀️", function(enabled)
    if enabled then
        game.Lighting.Brightness = 3
        game.Lighting.ClockTime = 12
        game.Lighting.FogEnd = 100000
        game.Lighting.GlobalShadows = false
        game.Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
    else
        game.Lighting.Brightness = 1
        game.Lighting.ClockTime = 14
        game.Lighting.FogEnd = 10000
        game.Lighting.GlobalShadows = true
        game.Lighting.OutdoorAmbient = Color3.new(0.5, 0.5, 0.5)
    end
end)

-- Utility features
local utilityContent = contentFrames["Utility"]

createToggle(utilityContent, "Anti-AFK", "💤", function(enabled)
    if enabled then
        cache.connections["antiafk"] = game:GetService("VirtualUser").Event:Connect(function()
            game:GetService("VirtualUser"):CaptureController()
            game:GetService("VirtualUser"):ClickButton2(Vector2.new())
        end)
    else
        if cache.connections["antiafk"] then
            cache.connections["antiafk"]:Disconnect()
        end
    end
end)

createToggle(utilityContent, "Server Hop", "🔄", function()
    local servers = {}
    local req = game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
    local data = game:GetService("HttpService"):JSONDecode(req).data
    
    for i,v in pairs(data) do
        if v.playing ~= v.maxPlayers and v.id ~= game.JobId then
            table.insert(servers, v.id)
        end
    end
    
    if #servers > 0 then
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
    end
end)

-- Window controls functionality
controls.Close.MouseButton1Click:Connect(function()
    animate(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
    wait(0.3)
    ScreenGui:Destroy()
end)

controls.Minimize.MouseButton1Click:Connect(function()
    animate(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
    MinimizedIcon.Visible = true
    animate(MinimizedIcon, {Size = UDim2.new(0, 70, 0, 70)}, 0.2)
end)

MinimizedIcon.MouseButton1Click:Connect(function()
    MinimizedIcon.Visible = false
    MainFrame.Size = UDim2.new(0, 0, 0, 0)
    MainFrame.Visible = true
    animate(MainFrame, {Size = CONFIG.GUI_SIZE}, 0.3)
end)

-- Make draggable
makeDraggable(MainFrame, Header)
makeDraggable(MinimizedIcon)

-- Cleanup on character death
LocalPlayer.CharacterRemoving:Connect(function()
    for _, connection in pairs(cache.connections) do
        if connection then
            connection:Disconnect()
        end
    end
end)

-- Welcome notification
game.StarterGui:SetCore("SendNotification", {
    Title = "Water Hub Mobile",
    Text = "Successfully loaded! Press minimize to hide.",
    Duration = 3
})

-- Performance monitoring
task.spawn(function()
    while wait(1) do
        local memUsage = collectgarbage("count")
        if memUsage > 500 then
            collectgarbage("collect")
        end
    end
end)
