-- Simple Exploit GUI - Minimal Version
-- No animations, simple design, full functionality

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local StarterGui = game:GetService("StarterGui")

-- Bypass Setup
local mt = getrawmetatable(game)
local old = mt.__namecall
local protect = newcclosure or protect_function

-- Variables
local player = Players.LocalPlayer
local mouse = player:GetMouse()
local camera = workspace.CurrentCamera

-- GUI Variables
local mainGui = nil
local minimizedGui = nil
local connections = {}
local states = {
    godMode = false,
    infiniteJump = false,
    speedBoost = false,
    noclip = false,
    fly = false,
    espBox = false,
    espNames = false,
    tpBase = false,
    stealHelper = false
}

local flyPart = nil
local basePosition = nil
local espObjects = {}

-- Simple Colors
local bgColor = Color3.new(0.1, 0.1, 0.1)
local fgColor = Color3.new(0.2, 0.2, 0.2)
local btnColor = Color3.new(0.3, 0.3, 0.3)
local activeColor = Color3.new(0, 0.7, 0)
local textColor = Color3.new(1, 1, 1)

-- Bypass
local function setupBypass()
    pcall(function()
        setreadonly(mt, false)
        
        mt.__namecall = protect(function(self, ...)
            local method = getnamecallmethod()
            
            if method == "Kick" or method == "kick" then
                return nil
            end
            
            if (method == "FireServer" or method == "InvokeServer") and self:IsA("RemoteEvent") or self:IsA("RemoteFunction") then
                local name = tostring(self):lower()
                if name:find("anti") or name:find("cheat") or name:find("ban") or name:find("kick") then
                    return nil
                end
            end
            
            return old(self, ...)
        end)
        
        setreadonly(mt, true)
    end)
    
    -- Anti-idle
    player.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end

-- Utility Functions
local function getCharacter()
    return player.Character or player.CharacterAdded:Wait()
end

local function getHumanoid()
    local char = getCharacter()
    return char and char:FindFirstChildOfClass("Humanoid")
end

local function getRootPart()
    local char = getCharacter()
    return char and (char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso"))
end

-- Simple UI Creation
local function createFrame(parent, size, position, color)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = color
    frame.BorderSizePixel = 0
    frame.Parent = parent
    return frame
end

local function createButton(parent, size, position, text, color)
    local button = Instance.new("TextButton")
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = color or btnColor
    button.Text = text
    button.TextColor3 = textColor
    button.TextScaled = true
    button.Font = Enum.Font.SourceSans
    button.BorderSizePixel = 0
    button.Parent = parent
    return button
end

local function createLabel(parent, size, position, text)
    local label = Instance.new("TextLabel")
    label.Size = size
    label.Position = position
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = textColor
    label.TextScaled = true
    label.Font = Enum.Font.SourceSans
    label.Parent = parent
    return label
end

local function createToggle(parent, position, text, callback, initialState)
    local container = createFrame(parent, UDim2.new(1, -10, 0, 25), position, fgColor)
    
    local label = createLabel(container, UDim2.new(0.7, 0, 1, 0), UDim2.new(0, 5, 0, 0), text)
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    local toggleBtn = createButton(container, UDim2.new(0.25, 0, 0.8, 0), UDim2.new(0.72, 0, 0.1, 0), 
        initialState and "ON" or "OFF", initialState and activeColor or btnColor)
    
    toggleBtn.MouseButton1Click:Connect(function()
        local newState = toggleBtn.Text == "OFF"
        toggleBtn.Text = newState and "ON" or "OFF"
        toggleBtn.BackgroundColor3 = newState and activeColor or btnColor
        callback(newState)
    end)
    
    return container, toggleBtn
end

local function makeDraggable(frame)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Feature Functions
local function toggleGodMode(enabled)
    states.godMode = enabled
    
    if connections.godMode then
        connections.godMode:Disconnect()
        connections.godMode = nil
    end
    
    if enabled then
        connections.godMode = RunService.Heartbeat:Connect(function()
            local humanoid = getHumanoid()
            if humanoid then
                humanoid.Health = humanoid.MaxHealth
                
                pcall(function()
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
                end)
                
                local char = getCharacter()
                if char and not char:FindFirstChild("ForceField") then
                    local ff = Instance.new("ForceField")
                    ff.Visible = false
                    ff.Parent = char
                end
            end
        end)
    end
end

local function toggleInfiniteJump(enabled)
    states.infiniteJump = enabled
    
    if connections.infiniteJump then
        connections.infiniteJump:Disconnect()
        connections.infiniteJump = nil
    end
    
    if enabled then
        connections.infiniteJump = UserInputService.JumpRequest:Connect(function()
            local humanoid = getHumanoid()
            local rootPart = getRootPart()
            
            if humanoid and rootPart then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                
                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                bodyVelocity.Velocity = Vector3.new(0, 50, 0)
                bodyVelocity.Parent = rootPart
                
                game:GetService("Debris"):AddItem(bodyVelocity, 0.1)
            end
        end)
    end
end

local function toggleSpeedBoost(enabled)
    states.speedBoost = enabled
    
    if connections.speedBoost then
        connections.speedBoost:Disconnect()
        connections.speedBoost = nil
    end
    
    if enabled then
        connections.speedBoost = RunService.Heartbeat:Connect(function()
            local humanoid = getHumanoid()
            if humanoid then
                humanoid.WalkSpeed = 25
            end
        end)
    else
        local humanoid = getHumanoid()
        if humanoid then
            humanoid.WalkSpeed = 16
        end
    end
end

local function toggleNoclip(enabled)
    states.noclip = enabled
    
    if connections.noclip then
        connections.noclip:Disconnect()
        connections.noclip = nil
    end
    
    if enabled then
        connections.noclip = RunService.Stepped:Connect(function()
            local character = getCharacter()
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        local character = getCharacter()
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.CanCollide = true
                end
            end
        end
    end
end

local function toggleFly(enabled)
    states.fly = enabled
    
    if connections.fly then
        connections.fly:Disconnect()
        connections.fly = nil
    end
    
    if flyPart then
        flyPart:Destroy()
        flyPart = nil
    end
    
    if enabled then
        flyPart = Instance.new("Part")
        flyPart.Size = Vector3.new(5, 0.2, 5)
        flyPart.Transparency = 1
        flyPart.CanCollide = true
        flyPart.Anchored = true
        flyPart.Parent = workspace
        
        connections.fly = RunService.Heartbeat:Connect(function()
            local rootPart = getRootPart()
            if not rootPart or not flyPart then return end
            
            flyPart.CFrame = CFrame.new(rootPart.Position - Vector3.new(0, 3.5, 0))
            
            local cam = workspace.CurrentCamera
            local moveVector = Vector3.new(0, 0, 0)
            
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + cam.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector - cam.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector - cam.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + cam.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveVector = moveVector + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                moveVector = moveVector - Vector3.new(0, 1, 0)
            end
            
            rootPart.Velocity = moveVector * 50
            rootPart.CFrame = CFrame.new(rootPart.Position) * CFrame.Angles(0, math.rad(rootPart.Orientation.Y), 0)
        end)
    else
        local rootPart = getRootPart()
        if rootPart then
            rootPart.Velocity = Vector3.new(0, 0, 0)
        end
    end
end

local function toggleESP(espType, enabled)
    states[espType] = enabled
    
    -- Clear existing ESP
    for player, objects in pairs(espObjects) do
        for _, obj in pairs(objects) do
            if obj then obj:Destroy() end
        end
    end
    espObjects = {}
    
    if connections.esp then
        connections.esp:Disconnect()
        connections.esp = nil
    end
    
    if states.espBox or states.espNames then
        connections.esp = RunService.Heartbeat:Connect(function()
            for _, targetPlayer in pairs(Players:GetPlayers()) do
                if targetPlayer ~= player and targetPlayer.Character then
                    local character = targetPlayer.Character
                    local rootPart = character:FindFirstChild("HumanoidRootPart")
                    
                    if rootPart then
                        if not espObjects[targetPlayer] then
                            espObjects[targetPlayer] = {}
                        end
                        
                        -- ESP Box
                        if states.espBox and not espObjects[targetPlayer].box then
                            local box = Instance.new("BoxHandleAdornment")
                            box.Size = character:GetExtentsSize()
                            box.Color3 = Color3.new(1, 0, 0)
                            box.Transparency = 0.5
                            box.AlwaysOnTop = true
                            box.Adornee = rootPart
                            box.Parent = rootPart
                            espObjects[targetPlayer].box = box
                        end
                        
                        -- ESP Names
                        if states.espNames and not espObjects[targetPlayer].name then
                            local billboard = Instance.new("BillboardGui")
                            billboard.Adornee = rootPart
                            billboard.Size = UDim2.new(0, 100, 0, 50)
                            billboard.StudsOffset = Vector3.new(0, 3, 0)
                            billboard.AlwaysOnTop = true
                            billboard.Parent = rootPart
                            
                            local nameLabel = createLabel(billboard, UDim2.new(1, 0, 1, 0), UDim2.new(0, 0, 0, 0), targetPlayer.Name)
                            nameLabel.BackgroundTransparency = 0.5
                            nameLabel.BackgroundColor3 = Color3.new(0, 0, 0)
                            
                            espObjects[targetPlayer].name = billboard
                        end
                    end
                end
            end
            
            -- Clean up disconnected players
            for targetPlayer, objects in pairs(espObjects) do
                if not targetPlayer.Parent then
                    for _, obj in pairs(objects) do
                        if obj then obj:Destroy() end
                    end
                    espObjects[targetPlayer] = nil
                end
            end
        end)
    end
end

-- TP Base Functions
local tpBaseGui = nil

local function createTPBaseGui()
    if tpBaseGui then tpBaseGui:Destroy() end
    
    tpBaseGui = Instance.new("ScreenGui")
    tpBaseGui.Name = "TPBaseGui"
    tpBaseGui.Parent = CoreGui
    
    local frame = createFrame(tpBaseGui, UDim2.new(0, 200, 0, 100), UDim2.new(0.5, -100, 0.3, 0), bgColor)
    frame.Active = true
    makeDraggable(frame)
    
    local title = createLabel(frame, UDim2.new(1, -30, 0, 25), UDim2.new(0, 5, 0, 0), "TP Base")
    
    local closeBtn = createButton(frame, UDim2.new(0, 25, 0, 25), UDim2.new(1, -25, 0, 0), "X", Color3.new(0.8, 0, 0))
    
    local setBtn = createButton(frame, UDim2.new(0.45, 0, 0, 25), UDim2.new(0.025, 0, 0, 35), "Set", activeColor)
    
    local tpBtn = createButton(frame, UDim2.new(0.45, 0, 0, 25), UDim2.new(0.525, 0, 0, 35), "TP", btnColor)
    
    local statusLabel = createLabel(frame, UDim2.new(1, -10, 0, 20), UDim2.new(0, 5, 0, 70), "No base set")
    statusLabel.TextScaled = false
    statusLabel.TextSize = 12
    
    closeBtn.MouseButton1Click:Connect(function()
        tpBaseGui:Destroy()
        tpBaseGui = nil
        states.tpBase = false
    end)
    
    setBtn.MouseButton1Click:Connect(function()
        local rootPart = getRootPart()
        if rootPart then
            basePosition = rootPart.Position
            statusLabel.Text = string.format("Base: %.1f, %.1f, %.1f", basePosition.X, basePosition.Y, basePosition.Z)
        end
    end)
    
    tpBtn.MouseButton1Click:Connect(function()
        if basePosition then
            local rootPart = getRootPart()
            if rootPart then
                -- Teleport up
                rootPart.CFrame = CFrame.new(rootPart.Position.X, 165, rootPart.Position.Z)
                wait(2)
                -- Move to base
                rootPart.CFrame = CFrame.new(basePosition.X, 165, basePosition.Z)
                wait(2)
                
                -- Create down button
                local downGui = Instance.new("ScreenGui")
                downGui.Parent = CoreGui
                
                local downBtn = createButton(downGui, UDim2.new(0, 100, 0, 50), UDim2.new(0.5, -50, 0.5, -25), "DOWN", Color3.new(0.8, 0, 0))
                
                downBtn.MouseButton1Click:Connect(function()
                    rootPart.CFrame = CFrame.new(basePosition)
                    downGui:Destroy()
                end)
            end
        else
            statusLabel.Text = "Set base first!"
        end
    end)
end

-- Steal Helper
local stealHelperGui = nil

local function createStealHelperGui()
    if stealHelperGui then stealHelperGui:Destroy() end
    
    stealHelperGui = Instance.new("ScreenGui")
    stealHelperGui.Name = "StealHelperGui"
    stealHelperGui.Parent = CoreGui
    
    local frame = createFrame(stealHelperGui, UDim2.new(0, 150, 0, 70), UDim2.new(0.8, -75, 0.5, -35), bgColor)
    frame.Active = true
    makeDraggable(frame)
    
    local title = createLabel(frame, UDim2.new(1, -30, 0, 25), UDim2.new(0, 5, 0, 0), "Steal Helper")
    
    local closeBtn = createButton(frame, UDim2.new(0, 25, 0, 25), UDim2.new(1, -25, 0, 0), "X", Color3.new(0.8, 0, 0))
    
    local upBtn = createButton(frame, UDim2.new(0.45, 0, 0, 25), UDim2.new(0.025, 0, 0, 35), "UP", activeColor)
    
    local downBtn = createButton(frame, UDim2.new(0.45, 0, 0, 25), UDim2.new(0.525, 0, 0, 35), "DOWN", Color3.new(0.8, 0, 0))
    
    closeBtn.MouseButton1Click:Connect(function()
        stealHelperGui:Destroy()
        stealHelperGui = nil
        states.stealHelper = false
    end)
    
    upBtn.MouseButton1Click:Connect(function()
        local rootPart = getRootPart()
        if rootPart then
            rootPart.CFrame = CFrame.new(rootPart.Position.X, 165, rootPart.Position.Z)
        end
    end)
    
    downBtn.MouseButton1Click:Connect(function()
        local rootPart = getRootPart()
        if rootPart then
            rootPart.CFrame = rootPart.CFrame - Vector3.new(0, 50, 0)
        end
    end)
end

local function toggleTPBase(enabled)
    states.tpBase = enabled
    if enabled then
        createTPBaseGui()
    else
        if tpBaseGui then
            tpBaseGui:Destroy()
            tpBaseGui = nil
        end
    end
end

local function toggleStealHelper(enabled)
    states.stealHelper = enabled
    if enabled then
        createStealHelperGui()
    else
        if stealHelperGui then
            stealHelperGui:Destroy()
            stealHelperGui = nil
        end
    end
end

-- Create Minimized Icon
local function createMinimized()
    if minimizedGui then minimizedGui:Destroy() end
    
    minimizedGui = Instance.new("ScreenGui")
    minimizedGui.Name = "MinimizedGui"
    minimizedGui.Parent = CoreGui
    
    local btn = createButton(minimizedGui, UDim2.new(0, 50, 0, 50), UDim2.new(0, 10, 0, 10), "+", btnColor)
    btn.Active = true
    makeDraggable(btn)
    
    btn.MouseButton1Click:Connect(function()
        minimizedGui:Destroy()
        minimizedGui = nil
        createMainGui()
    end)
end

-- Create Main GUI
function createMainGui()
    if mainGui then mainGui:Destroy() end
    
    mainGui = Instance.new("ScreenGui")
    mainGui.Name = "SimpleGui"
    mainGui.Parent = CoreGui
    
    -- Main Frame
    local mainFrame = createFrame(mainGui, UDim2.new(0, 300, 0, 400), UDim2.new(0.5, -150, 0.5, -200), bgColor)
    mainFrame.Active = true
    makeDraggable(mainFrame)
    
    -- Title Bar
    local titleBar = createFrame(mainFrame, UDim2.new(1, 0, 0, 30), UDim2.new(0, 0, 0, 0), fgColor)
    
    local title = createLabel(titleBar, UDim2.new(0.5, 0, 1, 0), UDim2.new(0, 5, 0, 0), "Simple GUI")
    title.TextXAlignment = Enum.TextXAlignment.Left
    
    local minimizeBtn = createButton(titleBar, UDim2.new(0, 30, 0, 30), UDim2.new(1, -60, 0, 0), "-", btnColor)
    local closeBtn = createButton(titleBar, UDim2.new(0, 30, 0, 30), UDim2.new(1, -30, 0, 0), "X", Color3.new(0.8, 0, 0))
    
    -- Content
    local content = createFrame(mainFrame, UDim2.new(1, -10, 1, -40), UDim2.new(0, 5, 0, 35), bgColor)
    
    -- Tabs
    local tabFrame = createFrame(content, UDim2.new(1, 0, 0, 30), UDim2.new(0, 0, 0, 0), fgColor)
    local tabs = {"Main", "Visual", "Misc"}
    local tabButtons = {}
    local tabContents = {}
    
    for i, tabName in ipairs(tabs) do
        local tabBtn = createButton(tabFrame, UDim2.new(0.33, -1, 1, 0), UDim2.new((i-1) * 0.33, 0, 0, 0), tabName, i == 1 and btnColor or fgColor)
        tabButtons[i] = tabBtn
        
        local tabContent = createFrame(content, UDim2.new(1, 0, 1, -35), UDim2.new(0, 0, 0, 35), bgColor)
        tabContent.Visible = (i == 1)
        tabContents[i] = tabContent
        
        tabBtn.MouseButton1Click:Connect(function()
            for j = 1, #tabs do
                tabButtons[j].BackgroundColor3 = (j == i) and btnColor or fgColor
                tabContents[j].Visible = (j == i)
            end
        end)
    end
    
    -- Main Tab
    local mainTab = tabContents[1]
    local yPos = 5
    
    createToggle(mainTab, UDim2.new(0, 5, 0, yPos), "God Mode", toggleGodMode, states.godMode)
    yPos = yPos + 30
    
    createToggle(mainTab, UDim2.new(0, 5, 0, yPos), "Infinite Jump", toggleInfiniteJump, states.infiniteJump)
    yPos = yPos + 30
    
    createToggle(mainTab, UDim2.new(0, 5, 0, yPos), "Speed Boost", toggleSpeedBoost, states.speedBoost)
    yPos = yPos + 30
    
    createToggle(mainTab, UDim2.new(0, 5, 0, yPos), "Noclip", toggleNoclip, states.noclip)
    yPos = yPos + 30
    
    createToggle(mainTab, UDim2.new(0, 5, 0, yPos), "Fly", toggleFly, states.fly)
    yPos = yPos + 30
    
    createToggle(mainTab, UDim2.new(0, 5, 0, yPos), "TP Base", toggleTPBase, states.tpBase)
    yPos = yPos + 30
    
    createToggle(mainTab, UDim2.new(0, 5, 0, yPos), "Steal Helper", toggleStealHelper, states.stealHelper)
    
    -- Visual Tab
    local visualTab = tabContents[2]
    yPos = 5
    
    createToggle(visualTab, UDim2.new(0, 5, 0, yPos), "ESP Box", function(enabled) toggleESP("espBox", enabled) end, states.espBox)
    yPos = yPos + 30
    
    createToggle(visualTab, UDim2.new(0, 5, 0, yPos), "ESP Names", function(enabled) toggleESP("espNames", enabled) end, states.espNames)
    
    -- Misc Tab
    local miscTab = tabContents[3]
    
    local rejoinBtn = createButton(miscTab, UDim2.new(0.9, 0, 0, 30), UDim2.new(0.05, 0, 0, 5), "Rejoin Server", btnColor)
    
    local serverHopBtn = createButton(miscTab, UDim2.new(0.9, 0, 0, 30), UDim2.new(0.05, 0, 0, 40), "Server Hop", btnColor)
    
    -- Events
    minimizeBtn.MouseButton1Click:Connect(function()
        mainGui:Destroy()
        createMinimized()
    end)
    
    closeBtn.MouseButton1Click:Connect(function()
        -- Disable all features
        for name, _ in pairs(states) do
            if states[name] then
                if name == "godMode" then toggleGodMode(false)
                elseif name == "infiniteJump" then toggleInfiniteJump(false)
                elseif name == "speedBoost" then toggleSpeedBoost(false)
                elseif name == "noclip" then toggleNoclip(false)
                elseif name == "fly" then toggleFly(false)
                elseif name == "tpBase" then toggleTPBase(false)
                elseif name == "stealHelper" then toggleStealHelper(false)
                elseif name:find("esp") then toggleESP(name, false)
                end
            end
        end
        
        -- Clean up
        for _, connection in pairs(connections) do
            if connection then connection:Disconnect() end
        end
        
        mainGui:Destroy()
        if minimizedGui then minimizedGui:Destroy() end
        if tpBaseGui then tpBaseGui:Destroy() end
        if stealHelperGui then stealHelperGui:Destroy() end
    end)
    
    rejoinBtn.MouseButton1Click:Connect(function()
        TeleportService:Teleport(game.PlaceId, player)
    end)
    
    serverHopBtn.MouseButton1Click:Connect(function()
        local servers = {}
        local req = syn and syn.request or http_request or request
        
        if req then
            local success, result = pcall(function()
                return req({
                    Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100",
                    Method = "GET"
                })
            end)
            
            if success and result.Success then
                local data = HttpService:JSONDecode(result.Body)
                for _, server in pairs(data.data) do
                    if server.playing < server.maxPlayers and server.id ~= game.JobId then
                        table.insert(servers, server.id)
                    end
                end
                
                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
                end
            end
        end
    end)
end

-- Character respawn handler
local function onCharacterAdded(character)
    wait(0.5)
    
    -- Reapply active states
    if states.godMode then toggleGodMode(true) end
    if states.speedBoost then toggleSpeedBoost(true) end
    if states.infiniteJump then toggleInfiniteJump(true) end
    if states.noclip then toggleNoclip(true) end
    if states.fly then toggleFly(true) end
end

-- Initialize
player.CharacterAdded:Connect(onCharacterAdded)
setupBypass()
createMainGui()

-- Notification
StarterGui:SetCore("SendNotification", {
    Title = "Simple GUI",
    Text = "Loaded successfully!",
    Duration = 3
})
